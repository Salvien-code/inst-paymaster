{"id":"11eee3e228dda87a0d6c3ce4eb633880","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAccountCodeStorage.sol\";\nimport \"./interfaces/INonceHolder.sol\";\nimport \"./interfaces/IContractDeployer.sol\";\nimport \"./interfaces/IKnownCodesStorage.sol\";\nimport \"./interfaces/IImmutableSimulator.sol\";\nimport \"./interfaces/IEthToken.sol\";\nimport \"./interfaces/IL1Messenger.sol\";\nimport \"./interfaces/ISystemContext.sol\";\n\nuint160 constant SYSTEM_CONTRACTS_OFFSET = 0x8000; // 2^15\nuint160 constant MAX_SYSTEM_CONTRACT_ADDRESS = 0xffff; // 2^16 - 1\n\naddress constant ECRECOVER_SYSTEM_CONTRACT = address(0x01);\naddress constant SHA256_SYSTEM_CONTRACT = address(0x02);\n\naddress payable constant BOOTLOADER_FORMAL_ADDRESS = payable(address(SYSTEM_CONTRACTS_OFFSET + 0x01));\nIAccountCodeStorage constant ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT = IAccountCodeStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x02));\nINonceHolder constant NONCE_HOLDER_SYSTEM_CONTRACT = INonceHolder(address(SYSTEM_CONTRACTS_OFFSET + 0x03));\nIKnownCodesStorage constant KNOWN_CODE_STORAGE_CONTRACT = IKnownCodesStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x04));\nIImmutableSimulator constant IMMUTABLE_SIMULATOR_SYSTEM_CONTRACT = IImmutableSimulator(address(SYSTEM_CONTRACTS_OFFSET + 0x05));\nIContractDeployer constant DEPLOYER_SYSTEM_CONTRACT = IContractDeployer(address(SYSTEM_CONTRACTS_OFFSET + 0x06));\n\n// A contract that is allowed to deploy any codehash\n// on any address. To be used only during an upgrade.\naddress constant FORCE_DEPLOYER = address(SYSTEM_CONTRACTS_OFFSET + 0x07);\nIL1Messenger constant L1_MESSENGER_CONTRACT = IL1Messenger(address(SYSTEM_CONTRACTS_OFFSET + 0x08));\naddress constant MSG_VALUE_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x09);\n\nIEthToken constant ETH_TOKEN_SYSTEM_CONTRACT = IEthToken(address(SYSTEM_CONTRACTS_OFFSET + 0x0a));\n\naddress constant KECCAK256_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x10);\n\nISystemContext constant SYSTEM_CONTEXT_CONTRACT = ISystemContext(payable(address(SYSTEM_CONTRACTS_OFFSET + 0x0b)));\n\nbytes32 constant DEFAULT_ACCOUNT_CODE_HASH = 0x00;\n\n// The number of bytes that are published during the contract deployment\n// in addition to the bytecode itself.\nuint256 constant BYTECODE_PUBLISHING_OVERHEAD = 100;\n\nuint256 constant MSG_VALUE_SIMULATOR_IS_SYSTEM_BIT = 2**128;\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccount.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport '../TransactionHelper.sol';\n\ninterface IAccount {\n\tfunction validateTransaction(\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash, \n\t\tTransaction calldata _transaction\n\t) external payable;\n\n\tfunction executeTransaction(\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash, \n\t\tTransaction calldata _transaction\n\t) external payable;\n\n\t// There is no point in providing possible signed hash in the `executeTransactionFromOutside` method, \n\t// since it typically should not be trusted.\n\tfunction executeTransactionFromOutside(Transaction calldata _transaction) external payable;\n\n\tfunction payForTransaction(\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash, \n\t\tTransaction calldata _transaction\n\t) external payable;\n\n\tfunction prePaymaster(\n\t\tbytes32 _txHash,\n\t\tbytes32 _possibleSignedHash, \n\t\tTransaction calldata _transaction\n\t) external payable;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IAccountCodeStorage {\n    function storeCodeHash(address _address, bytes32 _hash) external;\n\n    function getRawCodeHash(address _address) external view returns (bytes32 codeHash);\n\n    function getCodeHash(uint256 _input) external returns (bytes32 codeHash);\n    \n    function getCodeSize(uint256 _input) external returns (uint256 codeSize);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IContractDeployer {\n    event ContractDeployed(address indexed deployerAddress, bytes32 indexed bytecodeHash, address indexed contractAddress);\n\n    function getNewAddressCreate2(\n        address _sender,\n        bytes32 _bytecodeHash,\n        bytes32 _salt,\n        bytes calldata _input\n    ) external pure returns (address newAddress);\n \n    function getNewAddressCreate(\n        address _sender,\n        uint256 _senderNonce\n    ) external pure returns (address newAddress);\n\n    function create2 (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n\n    function create2Account (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While the `_salt` parameter is not used anywhere here, \n    /// it is still needed for consistency between `create` and\n    /// `create2` functions (required by the compiler).\n    function create (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While `_salt` is never used here, we leave it here as a parameter\n    /// for the consistency with the `create` function.\n    function createAccount (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IEthToken {\n    function balanceOf(address) external returns (uint256);\n    \n    function transferFromTo(address _from, address _to, uint256 _amount) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nstruct ImmutableData {\n    uint256 index;\n    bytes32 value;\n}\n\ninterface IImmutableSimulator {\n    function getImmutable(address _dest, uint256 _index) external view returns (bytes32);\n\n    function setImmutables(address _dest, ImmutableData[] calldata immutables) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IKnownCodesStorage {\n    event MarkedAsKnown(bytes32 indexed bytecodeHash, bool indexed sendBytecodeToL1);\n\n    function markFactoryDeps(bool _shouldSendToL1, bytes32[] calldata _hashes) external;\n\n    function getMarker(bytes32 _hash) external view returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IL1Messenger {\n    // Possibly in the future we will be able to track the messages sent to L1 with \n    // some hooks in the VM. For now, it is much easier to track them with L2 events.\n    event L1MessageSent(address indexed _sender, bytes32 indexed _hash, bytes _message);\n\n    function sendToL1(bytes memory _message) external returns (bytes32);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @dev Interface of the nonce holder contract -- a contract used by the system to ensure\n * that there is always a unique identifier for a transaction with a particular account (we call it nonce).\n * In other words, the pair of (address, nonce) should always be unique.\n * @dev Custom accounts should use methods of this contract to store nonces or other possible unique identifiers \n * for the transaction.\n */\ninterface INonceHolder {\n    /// @dev Returns the current minimal nonce for account.\n    function getMinNonce(address _address) external view returns(uint256);\n\n    /// @dev Returns the raw version of the current minimal nonce \n    /// (equal to minNonce + 2^128 * deployment nonce).\n    function getRawNonce(address _address) external view returns (uint256);\n\n    /// @dev Increases the minimal nonce for the msg.sender.\n    function increaseMinNonce(uint256 _value) external returns (uint256);\n\n    /// @dev Sets the nonce value `key` as used.\n    function setValueUnderNonce(uint256 _key, uint256 _value) external;\n\n    /// @dev Gets the value stored inside a custom nonce.\n    function getValueUnderNonce(uint256 _key) external view returns (uint256);\n\n    /// @dev A convenience method to increment the minimal nonce if it is equal\n    /// to the `_expectedNonce`.\n    function incrementMinNonceIfEquals(uint256 _expectedNonce) external;\n\n    /// @dev Returns the deployment nonce for the accounts used for CREATE opcode.\n    function getDeploymentNonce(address _address) external view returns (uint256);\n\n    /// @dev Increments the deployment nonce for the account and returns the previous one.\n    function incrementDeploymentNonce(address _address) external returns (uint256);\n\n    /// @dev Determines whether a certain nonce has been already used for an account.\n    function validateNonceUsage(address _address, uint256 _key, bool _shouldBeUsed) external view;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport '../TransactionHelper.sol';\n\nenum ExecutionResult {\n\tRevert,\n\tSuccess\n}\n\ninterface IPaymaster {\n\tfunction validateAndPayForPaymasterTransaction(\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash,\n\t\tTransaction calldata _transaction\n\t) external payable returns (bytes memory context);\n\n\t/// @dev Called by the bootloader after the execution of the transaction. Please note that \n\t/// there is no guarantee that this method will be called at all. Unlike the original EIP4337, \n\t/// this method won't be called if the transaction execution results in out-of-gas.\n\t/// @param _context, the context of the execution, returned by the \"validateAndPayForPaymasterTransaction\" method.\n\t/// @param  _transaction, the users' transaction.\n\t/// @param _txResult, the result of the transaction execution (success or failure).\n\t/// @param _maxRefundedErgs, the upper bound on the amout of ergs that could be refunded to the paymaster. \n\t/// @dev The exact amount refunded depends on the ergs spent by the \"postOp\" itself and so the developers should \n\t/// take that into account.\n\tfunction postOp(\n\t\tbytes calldata _context,\n\t\tTransaction calldata _transaction,\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash,\n\t\tExecutionResult _txResult,\n\t\tuint256 _maxRefundedErgs\n\t) external payable;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @dev The interface that is used for encoding/decoding of \n * different types of paymaster flows.\n * @notice This is NOT an interface to be implementated\n * by contracts. It is just used for encoding.\n */\ninterface IPaymasterFlow {\n    function general(bytes calldata input) external;\n    function approvalBased(address _token, uint256 _minAllowance, bytes calldata _innerInput) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/ISystemContext.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @notice Contract that stores some of the context variables, that may be either \n * block-scoped, tx-scoped or system-wide.\n */\ninterface ISystemContext {\n    function chainId() external view returns (uint256);\n\n    function origin() external view returns (address);\n\n    function ergsPrice() external view returns (uint256);\n\n    function blockErgsLimit() external view returns (uint256);\n\n    function coinbase() external view returns (address);\n\n    function difficulty() external view returns (uint256);\n\n    function msize() external view returns (uint256);\n\n    function baseFee() external view returns (uint256);\n\n    function blockHash(uint256 _block) external view returns (bytes32);\n\n    function getBlockHashEVM(uint256 _block) external view returns (bytes32);\n\n    function getBlockNumberAndTimestamp() external view returns (uint256 blockNumber, uint256 blockTimestamp);\n\n    // Note, that for now, the implementation of the bootloader allows this variables to \n    // be incremented multiple times inside a block, so it should not relied upon right now.\n    function getBlockNumber() external view returns (uint256);\n\n    function getBlockTimestamp() external view returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nlibrary RLPEncoder {\n\tfunction encodeAddress(address _val) internal pure returns (bytes memory encoded) {\n\t\t// The size is equal to 14 bytes of the address itself + 1 for encoding bytes length in RLP.\n\t\tencoded = new bytes(0x15);\n\n\t\tbytes20 shiftedVal = bytes20(_val);\n\t\tassembly {\n\t\t\t// In the first byte we write the encoded length as 0x80 + 0x14 == 0x94.\n\t\t\tmstore(add(encoded, 0x20), 0x9400000000000000000000000000000000000000000000000000000000000000)\n\t\t\t// Write address data without stripping zeros.\n\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t}\n\t}\n\n\tfunction encodeUint256(uint256 _val) internal pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_val < 128) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\t// Handle zero as a non-value, since stripping zeroes results in an empty byte array\n\t\t\t\tencoded[0] = (_val == 0) ? bytes1(uint8(128)) : bytes1(uint8(_val));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_val);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(hbs + 0x81));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _val << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Encodes the size of bytes in RLP format.\n\t/// NOTE: panics if the length is 1, since the length encoding is ambiguous in this case.\n\tfunction encodeNonSingleBytesLen(uint256 _len) internal pure returns (bytes memory) {\n\t\tassert(_len != 1);\n\t\treturn _encodeLength(_len, 0x80);\n\t}\n\n\t/// @notice Encodes the size of list items in RLP format.\n\tfunction encodeListLen(uint256 _len) internal pure returns (bytes memory) {\n\t\treturn _encodeLength(_len, 0xc0);\n\t}\n\n\tfunction _encodeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_len < 56) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\tencoded[0] = bytes1(uint8(_len + _offset));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_len);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(_offset + hbs + 56));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _len << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Computes the index of the highest byte set in number.\n\t/// @notice Uses little endian ordering (The least significant byte has index `0`).\n\t/// NOTE: returns `0` for `0`\n\tfunction _highestByteSet(uint256 _number) private pure returns (uint256 hbs) {\n\t\t// TODO: for optimization, the comparison can be replaced with bitwise operations\n\t\t// should be resolver after evaluating the cost of opcodes.\n\t\tif (_number >= 2**128) {\n\t\t\t_number >>= 128;\n\t\t\thbs += 16;\n\t\t}\n\t\tif (_number >= 2**64) {\n\t\t\t_number >>= 64;\n\t\t\thbs += 8;\n\t\t}\n\t\tif (_number >= 2**32) {\n\t\t\t_number >>= 32;\n\t\t\thbs += 4;\n\t\t}\n\t\tif (_number >= 2**16) {\n\t\t\t_number >>= 16;\n\t\t\thbs += 2;\n\t\t}\n\t\tif (_number >= 2**8) {\n\t\t\thbs += 1;\n\t\t}\n\t}\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/SystemContractsCaller.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8;\n\nimport \"./Constants.sol\";\n\n// Addresses used for the compiler to be replaced with the \n// zkSync-specific opcodes during the compilation.\n// IMPORTANT: these are just compile-time constants and are used\n// only if used in-place by Yul optimizer.\naddress constant TO_L1_CALL_ADDRESS = address((1<<16) - 1);\naddress constant CODE_ADDRESS_CALL_ADDRESS = address((1<<16) - 2);\naddress constant PRECOMPILE_CALL_ADDRESS = address((1<<16) - 3);\naddress constant META_CALL_ADDRESS = address((1<<16) - 4);\naddress constant MIMIC_CALL_CALL_ADDRESS = address((1<<16) - 5);\naddress constant SYSTEM_MIMIC_CALL_CALL_ADDRESS = address((1<<16) - 6);\naddress constant MIMIC_CALL_BY_REF_CALL_ADDRESS = address((1<<16) - 7);\naddress constant SYSTEM_MIMIC_CALL_BY_REF_CALL_ADDRESS = address((1<<16) - 8);\naddress constant RAW_FAR_CALL_CALL_ADDRESS = address((1<<16) - 9);\naddress constant RAW_FAR_CALL_BY_REF_CALL_ADDRESS = address((1<<16) - 10);\naddress constant SYSTEM_CALL_CALL_ADDRESS = address((1<<16) - 11);\naddress constant SYSTEM_CALL_BY_REF_CALL_ADDRESS = address((1<<16) - 12);\naddress constant SET_CONTEXT_VALUE_CALL_ADDRESS = address((1<<16) - 13);\naddress constant SET_PUBDATA_PRICE_CALL_ADDRESS = address((1<<16) - 14);\naddress constant INCREMENT_TX_COUNTER_CALL_ADDRESS = address((1<<16) - 15);\naddress constant PTR_CALLDATA_CALL_ADDRESS = address((1<<16) - 16);\naddress constant CALLFLAGS_CALL_ADDRESS = address((1<<16) - 17);\naddress constant GET_EXTRA_ABI_DATA_1_ADDRESS = address((1<<16) - 18);\naddress constant GET_EXTRA_ABI_DATA_2_ADDRESS = address((1<<16) - 19);\naddress constant PTR_RETURNDATA_CALL_ADDRESS = address((1<<16) - 20);\naddress constant LOAD_CALLDATA_INTO_ACTIVE_PTR_CALL_ADDRESS = address((1<<16) - 21);\naddress constant LOAD_LATEST_RETURNDATA_INTO_ACTIVE_PTR_CALL_ADDRESS = address((1<<16) - 22);\naddress constant PTR_ADD_INTO_ACTIVE_CALL_ADDRESS = address((1<<16) - 23);\naddress constant PTR_SHRINK_INTO_ACTIVE_CALL_ADDRESS = address((1<<16) - 24);\naddress constant PTR_PACK_INTO_ACTIVE_CALL_ADDRESS = address((1<<16) - 25);\n\n// All the offsets are in bits\nuint256 constant META_ERGS_PER_PUBDATA_BYTE_OFFSET = 0*8;\nuint256 constant META_HEAP_SIZE_OFFSET = 8*8;\nuint256 constant META_AUX_HEAP_SIZE_OFFSET = 12*8;\nuint256 constant META_SHARD_ID_OFFSET = 28*8;\nuint256 constant META_CALLER_SHARD_ID_OFFSET = 29*8;\nuint256 constant META_CODE_SHARD_ID_OFFSET = 30*8;\n\nenum CalldataForwardingMode {\n    UseHeap,\n    ForwardFatPointer,\n    UseAuxHeap\n}\n\n// A library that should be available publicly and be used to call\n// zkSync system contracts by users.\nlibrary SystemContractsCaller {\n    // Makes a call with \"system\" flag.\n    function systemCall(\n        uint32 ergsLimit,\n        address to,\n        uint128 value,\n        bytes memory data\n    ) internal returns (bytes memory returnData) {\n        address callAddr = SYSTEM_CALL_CALL_ADDRESS;\n\n        uint32 dataStart;\n        assembly {\n            dataStart := add(data, 0x20)\n        }\n        uint32 dataLength = uint32(uint24(data.length));\n\n        uint256 farCallAbi = SystemContractsCaller.getFarCallABI(\n            0,\n            0,\n            dataStart,\n            dataLength,\n            ergsLimit,\n            // Only rollup is supported for now\n            0,\n            CalldataForwardingMode.UseHeap,\n            false,\n            true\n        );\n\n        uint size = 0;\n        bool success;\n        if (value == 0) {\n            // Doing the system call directly\n            assembly {\n                success := call(to, callAddr, 0, 0, farCallAbi, 0, 0)\n            }\n        } else {\n            require(value <= MSG_VALUE_SIMULATOR_IS_SYSTEM_BIT, \"Value can not be greater than 2**128\");\n            // We must direct the call through the MSG_VALUE_SIMULATOR\n            // The first abi param for the MSG_VALUE_SIMULATOR carries \n            // the value of the call and whether the call should be a system one \n            // (in our case, it should be)\n            uint256 abiParam1 = (MSG_VALUE_SIMULATOR_IS_SYSTEM_BIT | value); \n\n            // The second abi param carries the address to call.\n            uint256 abiParam2 = uint256(uint160(to)); \n\n            address msgValueSimulator = MSG_VALUE_SYSTEM_CONTRACT;\n            assembly {\n                success := call(msgValueSimulator, callAddr, abiParam1, abiParam2, farCallAbi, 0, 0)\n            }\n        }\n\n        assembly {\n            size := returndatasize()\n            if eq(success, 0) {\n                returndatacopy(0, 0, size)\n                revert(0, size)\n            }\n        }\n\n        returnData = new bytes(size);\n        assembly {\n            mstore(returnData, size)\n            returndatacopy(add(returnData, 0x20), 0, size)\n        }\n    }\n\n    // A packed representation of the following data structure:\n    // pub struct FarCallABI {\n    //     pub memory_quasi_fat_pointer: FatPointer,\n    //     pub ergs_passed: u32,\n    //     pub shard_id: u8,\n    //     pub forwarding_mode: FarCallForwardPageType,\n    //     pub constructor_call: bool,\n    //     pub to_system: bool,\n    // }\n    //\n    // The FatPointer struct:\n    // \n    // pub struct FatPointer {\n    //     pub offset: u32, // offset relative to `start`\n    //     pub memory_page: u32, // memory page where slice is located\n    //     pub start: u32, // absolute start of the slice\n    //     pub length: u32, // length of the slice\n    // }\n    //\n    // Note, that the actual layout is the following:\n    // \n    // [0..32) bits -- the calldata offset\n    // [32..64) bits -- the memory page to use. Can be left blank in most of the cases.\n    // [64..96) bits -- the absolute start of the slice\n    // [96..128) bits -- the length of the slice.\n    // [128..196) bits -- empty bits.\n    // [196..224) bits -- ergsPassed.\n    // [224..232) bits -- shard id.\n    // [232..240) bits -- forwarding_mode\n    // [240..248) bits -- constructor call flag\n    // [248..256] bits -- system call flag\n    function getFarCallABI(\n        uint32 dataOffset,\n        uint32 memoryPage,\n        uint32 dataStart,\n        uint32 dataLength,\n        uint32 ergsPassed,\n        uint8 shardId,\n        CalldataForwardingMode forwardingMode,\n        bool isConstructorCall,\n        bool isSystemCall\n    ) internal pure returns (uint256 result) {\n        assembly {\n            // The data offset\n            result := shl(0, dataOffset)\n            result := or(result, shl(32, memoryPage))\n            result := or(result, shl(64, dataStart))\n            result := or(result, shl(96, dataLength))\n\n            result := or(result, shl(196, ergsPassed))\n            result := or(result, shl(224, shardId))\n            result := or(result, shl(232, forwardingMode))\n            result := or(result, shl(240, isConstructorCall))\n            result := or(result, shl(248, isSystemCall))\n        }\n    }\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport './RLPEncoder.sol';\nimport './Constants.sol';\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IPaymasterFlow.sol\";\n\n// TODO: change it to the `0x80`, must be changed atomically with the server.\n/// @dev Denotes the first byte of the special zkSync's EIP-712-signed transaction.\nuint8 constant EIP_712_TX_TYPE = 0x71;\n\n/// @dev Denotes the first byte of some legacy transaction, which type is unknown to the server.\nuint8 constant LEGACY_TX_TYPE = 0x0;\nuint8 constant EIP_1559_TX_TYPE = 0x02;\n\nstruct Transaction {\n\tuint256 txType;\n\tuint256 from;\n\tuint256 to;\n\tuint256 ergsLimit;\n\tuint256 ergsPerPubdataByteLimit;\n\tuint256 maxFeePerErg;\n\tuint256 maxPriorityFeePerErg;\n\tuint256 paymaster;\n\t// In the future, we might want to add some\n\t// new fields to the struct. The `txData` struct\n\t// is to be passed to account and any changes to its structure\n\t// would mean a breaking change to these accounts. In order to prevent this,\n\t// we should keep some fields as \"reserved\".\n\t// It is also recommneded that their length is fixed, since\n\t// it would allow easier proof integration (in case we will need\n\t// some special circuit for preprocessing transactions).\n\tuint256[6] reserved;\n\tbytes data;\n\tbytes signature;\n\tbytes32[] factoryDeps;\n\tbytes paymasterInput;\n\t// Reserved dynamic type for the future use-case. Using it should be avoided,\n\t// But it is still here, just in case we want to enable some additional functionality.\n\tbytes reservedDynamic;\n}\n\nlibrary TransactionHelper {\n\t/// @notice The EIP-712 typehash for the contract's domain\n\tbytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId)');\n\n\tbytes32 constant EIP712_TRANSACTION_TYPE_HASH =\n\t\tkeccak256(\n\t\t\t'Transaction(uint256 txType,uint256 from,uint256 to,uint256 ergsLimit,uint256 ergsPerPubdataByteLimit,uint256 maxFeePerErg,uint256 maxPriorityFeePerErg,uint256 paymaster,uint256 nonce,uint256 value,bytes data,bytes32[] factoryDeps,bytes paymasterInput)'\n\t\t);\n\n\tfunction isEthToken(uint256 _addr) internal pure returns (bool){\n\t\treturn _addr == uint256(uint160(address(ETH_TOKEN_SYSTEM_CONTRACT))) || _addr == 0;\n\t}\n\n\tfunction encodeHash(Transaction calldata _transaction) internal view returns (bytes32 resultHash) {\n\t\tif (_transaction.txType == LEGACY_TX_TYPE) {\n\t\t\tresultHash = _encodeHashLegacyTx(_transaction);\n\t\t} else if (_transaction.txType == EIP_712_TX_TYPE) {\n\t\t\tresultHash = _encodeHashEIP712Tx(_transaction);\n        } else if (_transaction.txType == EIP_1559_TX_TYPE) {\n            resultHash = _encodeHashEIP1559Tx(_transaction);\n        } else {\n\t\t\t// Currently no other transaction types are supported.\n\t\t\t// Any new transaction types will be processed in a similar manner.\n\t\t\trevert();\n\t\t}\n\t}\n\n\t/// @notice encode hash of the zkSync native transaction type.\n\t/// @return keccak256 of the EIP-712 encoded representation of transaction\n\tfunction _encodeHashEIP712Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                EIP712_TRANSACTION_TYPE_HASH,\n                _transaction.txType,\n                _transaction.from,\n                _transaction.to,\n                _transaction.ergsLimit,\n                _transaction.ergsPerPubdataByteLimit,\n                _transaction.maxFeePerErg,\n                _transaction.maxPriorityFeePerErg,\n                _transaction.paymaster,\n                _transaction.reserved[0],\n                _transaction.reserved[1],\n                keccak256(_transaction.data),\n                keccak256(abi.encodePacked(_transaction.factoryDeps)),\n                keccak256(_transaction.paymasterInput)\n\t\t\t)\n\t\t);\n\n\t\tbytes32 domainSeparator = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256('zkSync'), keccak256('2'), block.chainid));\n\n\t\treturn keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n\t}\n\n\t/// @notice encode hash of the legacy transaction type.\n\t/// @return keccak256 of the serialized RLP encoded representation of transaction\n\tfunction _encodeHashLegacyTx(Transaction calldata _transaction) private view returns (bytes32) {\n\t\t// Hash of legacy transactions are encoded as one of the:\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0)\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data)\n\t\t//\n\t\t// In this RLP encoding, only one higher list appears, so we encode each element\n\t\t// inside list and then concatenate the length of all elements with them.\n\n\t\tbytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n\t\t// Encode `gasPrice` and `gasLimit` together to prevent \"stack too deep error\".\n\t\tbytes memory encodedGasParam;\n\t\t{\n\t\t\tbytes memory encodedGasPrice = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n\t\t\tbytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n\t\t\tencodedGasParam = bytes.concat(encodedGasPrice, encodedGasLimit);\n\t\t}\n\n\t\tbytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n\t\tbytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n\t\t// Encode only the length of the transaction data, and not the data itself,\n\t\t// so as not to copy to memory a potentially huge transaction data twice.\n\t\tbytes memory encodedDataLength;\n\t\t{\n\t\t\tuint256 txDataLen = _transaction.data.length;\n\t\t\tif (txDataLen != 1) {\n\t\t\t\t// If the length is not equal to one, then only using the length can it be encoded definitely.\n\t\t\t\tencodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n\t\t\t} else if (_transaction.data[0] >= 0x80) {\n\t\t\t\t// If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n\t\t\t\tencodedDataLength = hex'81';\n\t\t\t}\n\t\t\t// Otherwise the length is not encoded at all.\n\t\t}\n\n\t\t// Encode `chainId` according to EIP-155, but only if the `chainId` is specified in the transaction.\n\t\tbytes memory encodedChainId;\n\t\tif (_transaction.reserved[2] != 0) {\n\t\t\tencodedChainId = bytes.concat(RLPEncoder.encodeUint256(block.chainid), hex'80_80');\n\t\t}\n\n\t\tbytes memory encodedListLength;\n\t\tunchecked {\n\t\t\tuint256 listLength = encodedNonce.length +\n\t\t\t\tencodedGasParam.length +\n\t\t\t\tencodedTo.length +\n\t\t\t\tencodedValue.length +\n\t\t\t\tencodedDataLength.length +\n\t\t\t\t_transaction.data.length +\n\t\t\t\tencodedChainId.length;\n\n\t\t\tencodedListLength = RLPEncoder.encodeListLen(listLength);\n\t\t}\n\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tbytes.concat(\n\t\t\t\t\tencodedListLength,\n\t\t\t\t\tencodedNonce,\n\t\t\t\t\tencodedGasParam,\n\t\t\t\t\tencodedTo,\n\t\t\t\t\tencodedValue,\n\t\t\t\t\tencodedDataLength,\n\t\t\t\t\t_transaction.data,\n\t\t\t\t\tencodedChainId\n\t\t\t\t)\n\t\t\t);\n\t}\n\n    function _encodeHashEIP1559Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        // Hash of EIP1559 transactions is encoded the following way:\n        // H(0x02 || RLP(chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list))\n        // \n        // Note, that on zkSync access lists are not supported and should always be empty.\n\n        // Encode all fixed-length params to avoid \"stack too deep error\"\n        bytes memory encodedFixedLengthParams;\n        {\n            bytes memory encodedChainId = RLPEncoder.encodeUint256(block.chainid);\n            bytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n            bytes memory encodedMaxPriorityFeePerGas = RLPEncoder.encodeUint256(_transaction.maxPriorityFeePerErg);\n            bytes memory encodedMaxFeePerGas = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n            bytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n            bytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n            bytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n            encodedFixedLengthParams = bytes.concat(\n                encodedChainId, \n                encodedNonce, \n                encodedMaxPriorityFeePerGas, \n                encodedMaxFeePerGas, \n                encodedGasLimit, \n                encodedTo, \n                encodedValue\n            );\n        }\n\n        // Encode only the length of the transaction data, and not the data itself,\n        // so as not to copy to memory a potentially huge transaction data twice.\n        bytes memory encodedDataLength;\n        {\n            uint256 txDataLen = _transaction.data.length;\n            if (txDataLen != 1) {\n                // If the length is not equal to one, then only using the length can it be encoded definitely.\n                encodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n            } else if (_transaction.data[0] >= 0x80) {\n                // If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n                encodedDataLength = hex'81';\n            }\n            // Otherwise the length is not encoded at all.\n        }\n\n        // On zkSync, access lists are always zero length (at least for now).\n        bytes memory encodedAccessListLength = RLPEncoder.encodeListLen(0);\n\n        bytes memory encodedListLength;\n        unchecked {\n            uint256 listLength = \n                encodedFixedLengthParams.length +\n                encodedDataLength.length +\n                _transaction.data.length +\n                encodedAccessListLength.length;\n\n            encodedListLength = RLPEncoder.encodeListLen(listLength);\n        }\n\n        return\n            keccak256(\n                bytes.concat(\n                    '\\x02',\n                    encodedListLength,\n                    encodedFixedLengthParams,\n                    encodedDataLength,\n                    _transaction.data,\n                    encodedAccessListLength\n                )\n            );\n    }\n\n\tfunction processPaymasterInput(Transaction calldata _transaction) internal {\n\t\trequire(_transaction.paymasterInput.length >= 4, \"The standard paymaster input must be at least 4 bytes long\");\n\n\t\tbytes4 paymasterInputSelector = bytes4(_transaction.paymasterInput[0:4]);\n\t\tif (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n\t\t\t// While the actual data consists of address, uint256 and bytes data, \n\t\t\t// the data is needed only for the paymaster, so we ignore it here for the sake of optimization\n\t\t\t(address token, uint256 minAllowance) = abi.decode(_transaction.paymasterInput[4:68], (address, uint256));\n\t\t\taddress paymaster = address(uint160(_transaction.paymaster));\n\n\t\t\tuint256 currentAllowance = IERC20(token).allowance(address(this), paymaster);\n\t\t\tif (currentAllowance < minAllowance) {\n\t\t\t\t// Some tokens, e.g. USDT require that the allowance is firsty set to zero \n\t\t\t\t// and only then updated to the new value.\n\t\t\t\t\n\t\t\t\tIERC20(token).approve(paymaster, 0);\n\t\t\t\tIERC20(token).approve(paymaster, minAllowance);\n\t\t\t}\n\t\t} else if (paymasterInputSelector == IPaymasterFlow.general.selector) {\n\t\t\t// Do nothing. General(bytes) paymaster flow means that the paymaster must interpret these bytes on his own.\n\t\t} else {\n\t\t\trevert(\"Unsupported paymaster flow\");\n\t\t}\n\t}\n\n\tfunction payToTheBootloader(Transaction calldata _transaction) internal returns (bool success){\n\t\taddress bootloaderAddr = BOOTLOADER_FORMAL_ADDRESS;\n\t\tuint256 amount = _transaction.maxFeePerErg * _transaction.ergsLimit;\n\n\t\tassembly {\n\t\t\tsuccess := call(\n\t\t\t\tgas(),\n\t\t\t\tbootloaderAddr,\n\t\t\t\tamount,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t)\n\t\t}\n\t}\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/Account.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccount.sol\";\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol\";\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol\";\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/SystemContractsCaller.sol\";\n\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract SAccount is IAccount, IERC1271 {\n    using TransactionHelper for Transaction;\n\n    bytes4 constant EIP1271_SUCCESS_RETURN_VALUE = 0x1626ba7e;\n\n    address immutable owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    modifier onlyBootloader() {\n        require(\n            msg.sender == BOOTLOADER_FORMAL_ADDRESS,\n            \"Only bootloader can call this method\"\n        );\n        // Continure execution if called from the bootloader.\n        _;\n    }\n\n    function validateTransaction(\n        bytes32,\n        bytes32 _suggestedSignedHash,\n        Transaction calldata _transaction\n    ) external payable override onlyBootloader {\n        _validateTransaction(_suggestedSignedHash, _transaction);\n    }\n\n    function _validateTransaction(\n        bytes32 _suggestedSignedHash,\n        Transaction calldata _transaction\n    ) internal {\n        // Incrementing the nonce of the account.\n        // Note, that reserved[0] by convention is currently equal to the nonce passed in the transaction\n        // also note only the systemcontractcaller can call non view methed in the noncwholdercontract\n        SystemContractsCaller.systemCall(\n            uint32(gasleft()),\n            address(NONCE_HOLDER_SYSTEM_CONTRACT),\n            0,\n            abi.encodeCall(\n                INonceHolder.incrementMinNonceIfEquals,\n                (_transaction.reserved[0])\n            )\n        );\n\n        bytes32 txHash;\n        if (_suggestedSignedHash == bytes32(0)) {\n            txHash = _transaction.encodeHash();\n        } else {\n            txHash = _suggestedSignedHash;\n        }\n\n        require(\n            isValidSignature(txHash, _transaction.signature) ==\n                EIP1271_SUCCESS_RETURN_VALUE\n        );\n    }\n\n    function executeTransaction(\n        bytes32,\n        bytes32,\n        Transaction calldata _transaction\n    ) external payable override onlyBootloader {\n        _executeTransaction(_transaction);\n    }\n\n    function _executeTransaction(Transaction calldata _transaction) internal {\n        address to = address(uint160(_transaction.to));\n        // By convention, the `reserved[1]` field is msg.value\n        uint256 value = _transaction.reserved[1];\n        bytes memory data = _transaction.data;\n\n        if (to == address(DEPLOYER_SYSTEM_CONTRACT)) {\n            // We allow calling ContractDeployer with any calldata\n            SystemContractsCaller.systemCall(\n                uint32(gasleft()),\n                to,\n                uint128(_transaction.reserved[1]), // By convention, reserved[1] is `value`\n                _transaction.data\n            );\n        } else {\n            bool success;\n            assembly {\n                success := call(\n                    gas(),\n                    to,\n                    value,\n                    add(data, 0x20),\n                    mload(data),\n                    0,\n                    0\n                )\n            }\n\n            // Needed for the transaction to be correctly processed by the server.\n            require(success);\n        }\n    }\n\n    function executeTransactionFromOutside(Transaction calldata _transaction)\n        external\n        payable\n    {\n        _validateTransaction(bytes32(0), _transaction);\n        _executeTransaction(_transaction);\n    }\n\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\n        public\n        view\n        override\n        returns (bytes4)\n    {\n        require(_signature.length == 65, \"incorrect signature length\");\n        address recoveredAddress = ECDSA.recover(_hash, _signature);\n        if (recoveredAddress != owner) revert(\"invalid signature\");\n        return EIP1271_SUCCESS_RETURN_VALUE;\n    }\n\n    function payForTransaction(\n        bytes32,\n        bytes32,\n        Transaction calldata _transaction\n    ) external payable override onlyBootloader {\n        bool success = _transaction.payToTheBootloader();\n        require(success, \"Failed to pay the fee to the operator\");\n    }\n\n    function prePaymaster(\n        bytes32,\n        bytes32,\n        Transaction calldata _transaction\n    ) external payable override onlyBootloader {\n        _transaction.processPaymasterInput();\n    }\n\n    receive() external payable {\n        // If the bootloader called the `receive` function, it likely means\n        // that something went wrong and the transaction should be aborted. The bootloader should\n        // only interact through the `validateTransaction`/`executeTransaction` methods.\n        assert(msg.sender != BOOTLOADER_FORMAL_ADDRESS);\n    }\n}\n"},"contracts/factory/AccountFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol\";\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/SystemContractsCaller.sol\";\n\ncontract SAccountFactory {\n    bytes32 public BytecodeHash;\n\n    constructor(bytes32 _bytecodeHash) {\n        BytecodeHash = _bytecodeHash;\n    }\n\n    function deployAccount(bytes32 salt, address owner)\n        external\n        returns (address accountAddress)\n    {\n        bytes memory returnData = SystemContractsCaller.systemCall(\n            uint32(gasleft()),\n            address(DEPLOYER_SYSTEM_CONTRACT),\n            0,\n            abi.encodeCall(\n                DEPLOYER_SYSTEM_CONTRACT.create2Account,\n                (salt, BytecodeHash, abi.encode(owner))\n            )\n        );\n\n        (accountAddress, ) = abi.decode(returnData, (address, bytes));\n    }\n}\n"},"contracts/factory/PaymasterFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol\";\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/SystemContractsCaller.sol\";\nimport \"./PaymasterFactoryStorage.sol\";\n\ncontract SPaymasterFactory {\n    bytes32 public BytecodeHash;\n    SPaymasterStorage paymasterStorage;\n\n    /**\n     * @notice creates new instance of paymasterStorage at factory creation time (see IPaymasterStorage.sol)\n     */\n    constructor(bytes32 _bytecodeHash) {\n        BytecodeHash = _bytecodeHash;\n        paymasterStorage = new SPaymasterStorage();\n    }\n\n    /**\n     * @notice This function uses Create2 to deploy a paymaster contract\n     * @dev uses SystemcontractCaller makes a call to the DEPLOYER_SYSTEM_CONTRACT and deploys paymaster contract with bytecode (BytecodeHash).\n     * @param salt - create2 salt\n     * @param owner - deployer address or whomever will be assumed paymaster owner\n     * @param metadata - metadata to be passed to PaymasterStorage\n     * @param maxNonce - used in Paymaster to allow paymaster useable by only new wallets\n     * @param useCustomToken - tells paymaster an ERC20 should be used for Validation (see Paymaster.sol)\n     * @param amount - (optional) tells paymaster to require to hold x amount of ERCX token\n     * @param validationAddress - ERC20 Fee reciever. A specific address that should hold high level paymaster roles (e.g protocol governance contract)\n     */\n    function deployPaymaster(\n        // used in create2\n        bytes32 salt,\n        address owner,\n        // used in paymasterStorage\n        bytes memory metadata,\n        // parsed to paymaster constructor\n        uint64 maxNonce,\n        bool useCustomToken,\n        address tokenAddress,\n        uint192 amount,\n        address validationAddress\n    ) external returns (address accountAddress) {\n        bytes memory returnData = SystemContractsCaller.systemCall(\n            uint32(gasleft()),\n            address(DEPLOYER_SYSTEM_CONTRACT),\n            0,\n            abi.encodeCall(\n                DEPLOYER_SYSTEM_CONTRACT.create2,\n                (\n                    salt,\n                    BytecodeHash,\n                    abi.encode(\n                        owner,\n                        maxNonce,\n                        useCustomToken,\n                        tokenAddress,\n                        amount,\n                        validationAddress\n                    )\n                )\n            )\n        );\n\n        (accountAddress, ) = abi.decode(returnData, (address, bytes));\n        storePaymaster(owner, accountAddress, metadata);\n    }\n\n    function storePaymaster(\n        address owner,\n        address paymasterAddr,\n        bytes memory metadata\n    ) internal {\n        paymasterStorage.storePaymaster(owner, paymasterAddr, metadata);\n    }\n}\n"},"contracts/factory/PaymasterFactoryStorage.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"../interface/IPaymaster.sol\";\n\n/// @title Paymster Storage Contract\n/// @author (github@peteruche21)\n/// @notice Stores paymasters deployed by the Paymaster factory.\n/// @dev includes Paymaster Contract address and paymaster metadata, paymaster metadata consists of owner address, name and logoHash, creation detials. Paymaster metadata is stored offchain\ncontract SPaymasterStorage {\n    struct PaymasterMeta {\n        address contract_address;\n        bytes metadata;\n    }\n    mapping(address => uint256) private ownerToPaymaster;\n    PaymasterMeta[] internal Paymasters;\n\n    /**\n     * @notice Stores Paymaster to Array Paymasters\n     * @dev External function! must be called from the factory, does not guarantee ERC165 check.\n     * @param owner - the deployer of this paymaster\n     * @param paymasterAddr - the address of paymaster to store\n     * @param metadata - offchain metadata cid/hash (name, owner, logoHash: paymaster logo, creation details)\n     */\n    function storePaymaster(\n        address owner,\n        address paymasterAddr,\n        bytes memory metadata\n    ) external {\n        // check if paymasterAddr surpports the ISPaymaster Interface\n        // not a valid check, cause you can just return bool==true from attacking contract.\n        // but lets keep it. possibly allow only calls from factory.\n        require(\n            IERC165(paymasterAddr).supportsInterface(\n                type(ISPaymaster).interfaceId\n            ),\n            \"not a valid paymaster contract\"\n        );\n        ownerToPaymaster[owner] = Paymasters.length;\n        Paymasters.push(\n            PaymasterMeta({contract_address: paymasterAddr, metadata: metadata})\n        );\n    }\n\n    function getPaymasterByOwner(address owner)\n        external\n        view\n        returns (PaymasterMeta memory)\n    {\n        return (Paymasters[ownerToPaymaster[owner]]);\n    }\n\n    function getAllPaymasters() external view returns (PaymasterMeta[] memory) {\n        return Paymasters;\n    }\n}\n"},"contracts/interface/IAccount.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol\";\n\ninterface IAccount {\n    function validateTransaction(\n        bytes32 _txHash,\n        bytes32 _suggestedSignedHash,\n        Transaction calldata _transaction\n    ) external payable;\n\n    function executeTransaction(\n        bytes32 _txHash,\n        bytes32 _suggestedSignedHash,\n        Transaction calldata _transaction\n    ) external payable;\n\n    function executeTransactionFromOutside(Transaction calldata _transaction)\n        external\n        payable;\n\n    function payForTransaction(\n        bytes32 _txHash,\n        bytes32 _suggestedSignedHash,\n        Transaction calldata _transaction\n    ) external payable;\n\n    function prePaymaster(\n        bytes32 _txHash,\n        bytes32 _possibleSignedHash,\n        Transaction calldata _transaction\n    ) external payable;\n}\n"},"contracts/interface/IAccountFactory.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\ninterface ISAccountFactory {\n    function deployAccount(bytes32 salt, address owner) external;\n}\n"},"contracts/interface/IPaymaster.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\nimport {IPaymaster} from \"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol\";\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface ISPaymaster is IPaymaster, IERC165 {\n    function satisfiedTokenrequirements(address addressToSatisfy)\n        external\n        payable;\n}\n"},"contracts/interface/IPaymasterFactory.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\ninterface ISPaymasterFactory {\n    function deployPaymaster(\n        // used in create2\n        bytes32 salt,\n        address owner,\n        // used in paymasterStorage\n        bytes memory metadata,\n        // parsed to paymaster constructor\n        uint64 maxNonce, // allow users to perfom a limited amount of tx, default = 0 == unlimited\n        bool useCustomToken, // use an erc20 or erc721 token for user vlidation, default = false == adress(this)\n        address tokenAddress, // custom token contract for user validation, required if useCustomToken == true\n        uint192 amount, // amount in erc20 required to use this paymaster, default = 1 for erc721, > 1 for erc20\n        // account that pays the fees, if erc20 is set, default = caller\n        // if erc721 is set, address(this) pays the eth cost\n        // if not useCustomToken, address(this) pays the eth cost\n        address validationAddress //VA default is address(this) if erc20 not set\n    ) external;\n}\n"},"contracts/interface/IPaymasterFactoryStorage.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\ninterface ISPaymasterStorage {\n    function storePaymaster(\n        address owner,\n        address paymasterAddr,\n        bytes memory metadata\n    ) external;\n\n    function getPaymasterByOwner() external view;\n\n    function getAllPaymasters() external view;\n}\n"},"contracts/Paymaster.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\nimport {ExecutionResult} from \"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol\";\nimport {IPaymasterFlow} from \"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol\";\nimport {TransactionHelper, Transaction} from \"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol\";\n\nimport \"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol\";\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\n\nimport \"./interface/IPaymaster.sol\";\n\n/**\n * @title Paymaster Contract\n * @notice handles custom logic for Account Abstraction Paymaster\n */\ncontract SPaymaster is ISPaymaster {\n    struct PaymasterParams {\n        address owner;\n        uint64 maxNonce;\n        uint192 amount;\n        bool useCustomToken;\n        address tokenAddress;\n        address validationAddress;\n    }\n\n    PaymasterParams private params;\n\n    // x amount of ERC20 that can be used instead of eth as gas fees\n    uint256 public ERC20_PRICE_FOR_PAYING_FEES = 1;\n\n    // @notice see (factory/PaymasterFactory.sol)\n    constructor(\n        address _owner, // deployer address\n        uint64 _maxNonce,\n        bool _useCustomToken,\n        address _tokenAddress,\n        uint192 _amount,\n        address _validationAddress // protocol address (for future modifications where governance may be used to halt paymaster) possibly, validationAddress (VA) can have high level roles\n    ) {\n        params = PaymasterParams({\n            owner: _owner,\n            maxNonce: _maxNonce,\n            amount: _amount,\n            useCustomToken: _useCustomToken,\n            tokenAddress: _tokenAddress,\n            validationAddress: _validationAddress\n        });\n    }\n\n    modifier onlyBootloader() {\n        require(\n            msg.sender == BOOTLOADER_FORMAL_ADDRESS,\n            \"Only bootloader can call this method\"\n        );\n        // Continure execution if called from the bootloader.\n        _;\n    }\n\n    function validateAndPayForPaymasterTransaction(\n        bytes32,\n        bytes32,\n        Transaction calldata _transaction\n    ) external payable override onlyBootloader returns (bytes memory context) {\n        // Transaction validation logic goes here\n        require(\n            _transaction.paymasterInput.length >= 4,\n            \"The standard paymaster input must be at least 4 bytes long\"\n        );\n\n        bytes4 paymasterInputSelector = bytes4(\n            _transaction.paymasterInput[0:4]\n        );\n        if (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n            (address token, uint256 minAllowance, bytes memory data) = abi\n                .decode(\n                    _transaction.paymasterInput[4:],\n                    (address, uint256, bytes)\n                );\n\n            address callerAddress = address(uint160(_transaction.from));\n            address addressThis = address(this);\n\n            // Note, that while the minimal amount of ETH needed is tx.ergsPrice * tx.ergsLimit,\n            // neither paymaster nor account are allowed to access this context variable.\n            uint256 requiredETH = _transaction.ergsLimit *\n                _transaction.maxFeePerErg;\n\n            // start modified logic\n            if (params.useCustomToken) {\n                // if useCustom == true: proceed else just charge the contract\n                require(\n                    params.tokenAddress != address(0), // global token must be valid\n                    \"Custom Token must be provided\"\n                );\n                require(token == params.tokenAddress, \"Invalid token\"); // user provided token must match global token\n                require(minAllowance >= 1, \"Min allowance too low\"); // probably useless, or check against ERC20_PRICE_FOR_PAYING_FEES instead\n                if (params.amount >= 1) {\n                    // satisfaction must be reached\n                    require(\n                        _satisfiedTokenRequirements(callerAddress),\n                        \"user not eligible to use this paymaster\"\n                    );\n                    if (params.validationAddress == address(0)) {\n                        // will fail if params.tokenaddress == erc721\n                        // if params.tokenaddress == erc721, consider setting a validation address.\n                        _chargeERC20FeeFromAddress(callerAddress, addressThis);\n                        _chargeEthFeeFromContract(requiredETH);\n                    } else {\n                        _chargeERC20FeeFromAddress(\n                            callerAddress,\n                            params.validationAddress\n                        );\n                        _chargeEthFeeFromContract(requiredETH);\n                    }\n                } else {\n                    // satisfaction is not required\n                    if (params.validationAddress == address(0)) {\n                        // same logic as above\n                        _chargeERC20FeeFromAddress(callerAddress, addressThis);\n                        _chargeEthFeeFromContract(requiredETH);\n                    } else {\n                        _chargeERC20FeeFromAddress(\n                            callerAddress,\n                            params.validationAddress\n                        );\n                        _chargeEthFeeFromContract(requiredETH);\n                    }\n                }\n            } else {\n                _chargeEthFeeFromContract(requiredETH);\n            }\n            // end modified logic\n        } else {\n            revert(\"Unsupported paymaster flow\");\n        }\n    }\n\n    //\n    // validation functions\n    //\n\n    /**\n     * @notice checks for ERC20 allowance of address (_addressToCheck)\n     * @param _addressToCheck - AA wallet address\n     * @return uint256 - allowance\n     */\n    function _checkAllowance(address _addressToCheck)\n        internal\n        view\n        returns (uint256)\n    {\n        // checck allowance logic\n        uint256 providedAllowance = IERC20(params.tokenAddress).allowance(\n            _addressToCheck,\n            address(this)\n        );\n        return providedAllowance;\n    }\n\n    function satisfiedTokenrequirements(address addressToSatisfy)\n        external\n        payable\n    {\n        _satisfiedTokenRequirements(addressToSatisfy);\n    }\n\n    /**\n     * @notice satisfies that (caller) holds x required amount of ERC(X) token before paying for (caller)\n     * @param _addressToSatisfy - AA Wallet to satisfy\n     * @return bool - true/false\n     */\n    function _satisfiedTokenRequirements(address _addressToSatisfy)\n        internal\n        view\n        returns (bool)\n    {\n        // satisfy that an address holds the required token of amount x\n        // checks if token is erc20 or erc721\n        // note the surported token should implement ERC165\n        // whether true or false user must hold the token before paymaster proceeds except the amount == 0\n        // if does not support erc721 then assume its erc20 and allow transactions fail (bad approach)\n\n        bool isERC721 = IERC165(params.tokenAddress).supportsInterface(\n            type(IERC721).interfaceId\n        );\n\n        if (!isERC721) {\n            // if is erc20, then the caller must satisfy.\n            require(\n                IERC20(params.tokenAddress).balanceOf(_addressToSatisfy) >=\n                    params.amount,\n                \"address does not satisy paymaster conditions\"\n            );\n            return true;\n        } else if (isERC721) {\n            // if is erc721, then the caller must satisfy.\n            require(\n                IERC721(params.tokenAddress).balanceOf(_addressToSatisfy) >= 1,\n                \"address does not satisy paymaster conditions\"\n            );\n            return true;\n        }\n        return false;\n    }\n\n    //\n    // debit and money handling functions\n    //\n\n    /**\n     * @notice transfers gas fee required for transaction to the BOOTLOADER\n     * @param _requiredETH - amount of eth required for transaction\n     */\n    function _chargeEthFeeFromContract(uint256 _requiredETH) internal {\n        // debit paymaster logic\n        (bool success, ) = payable(BOOTLOADER_FORMAL_ADDRESS).call{\n            value: _requiredETH\n        }(\"\");\n        require(success, \"Failed to transfer funds to the bootloader\");\n    }\n\n    /**\n     * @dev - checks (caller) allowance and transfers ERC20_PRICE_FOR_PAYING_FEES amount of ERC20 to (_addrToCharge)\n     * @param _addrToCharge - ERC20 Fee reciever\n     * @return success - true/false\n     */\n    function _chargeERC20FeeFromAddress(address _addrToCharge, address _to)\n        internal\n        returns (bool success)\n    {\n        // check allowance and charge addrToCharge corresponding ERC20 tokens\n        require(\n            _checkAllowance(_addrToCharge) >= ERC20_PRICE_FOR_PAYING_FEES,\n            \"The user did not provide enough allowance\"\n        );\n        success = IERC20(params.tokenAddress).transferFrom(\n            _addrToCharge,\n            _to,\n            ERC20_PRICE_FOR_PAYING_FEES\n        );\n    }\n\n    //\n    // risky update functions\n    //\n\n    /**\n     * @notice can only be called by the deployer - updates the ERC20_PRICE_FOR_PAYING_FEES\n     * in the future might allow only the validation address to have this priviledge\n     * @param newPrice - updated ERC20_PRICE_FOR_PAYING_FEES\n     */\n    function updateERC20Fee(uint256 newPrice) public {\n        require(\n            msg.sender == params.owner, // may refactor to allow validation address to change fee\n            \"only paymaster creator can change ERC20Fee\"\n        );\n        ERC20_PRICE_FOR_PAYING_FEES = newPrice;\n    }\n\n    // can be implemented if need be\n    // function updateInternalPaymasterParams(\n    //     uint64 maxNonce,\n    //     uint192 amount,\n    //     bool useCustomToken,\n    //     address tokenAddress,\n    //     address newValidationAddress\n    // ) public {\n    //     address currentValidationAddress = params.validationAddress;\n    //     require(\n    //         msg.sender == params.owner ||\n    //             msg.sender == currentValidationAddress, // only VA or owner can modify params\n    //         \"only paymaster creator can change ERC20Fee\"\n    //     );\n    //     params = PaymasterParams(\n    //         params.owner,\n    //         maxNonce,\n    //         amount,\n    //         useCustomToken,\n    //         tokenAddress,\n    //         newValidationAddress\n    //     );\n    // }\n\n    function postOp(\n        bytes calldata _context,\n        Transaction calldata _transaction,\n        bytes32 _txHash,\n        bytes32 _suggestedSignedHash,\n        ExecutionResult _txResult,\n        uint256 _maxRefundedErgs\n    ) external payable onlyBootloader {\n        // This contract does not support any refunding logic\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        external\n        pure\n        returns (bool)\n    {\n        return interfaceId == type(ISPaymaster).interfaceId;\n    }\n\n    receive() external payable {}\n}\n"},"contracts/tokens/ERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MyERC20 is ERC20 {\n    uint8 private _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    function mint(address _to, uint256 _amount) public returns (bool) {\n        _mint(_to, _amount);\n        return true;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"},"contracts/tokens/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract InstPayToken is ERC721, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    constructor(string memory name_, string memory symbol_)\n        ERC721(name_, symbol_)\n    {}\n\n    function safeMint(address to) public onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Paymaster.sol:66:57:\n   |\n66 |     ) external payable override onlyBootloader returns (bytes memory context) {\n   |                                                         ^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/Paymaster.sol","start":2268,"end":2288},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/Paymaster.sol:77:51:\n   |\n77 |             (address token, uint256 minAllowance, bytes memory data) = abi\n   |                                                   ^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"file":"contracts/Paymaster.sol","start":2730,"end":2747},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using 'ecrecover' to validate a signature of a user account.      │\n│ zkSync 2.0 will come with the native account abstraction support. It is highly recommended NOT   │\n│ to rely on the fact that the account has an ECDSA private key attached to it, since they may be  │\n│ ruled by a multisig and use another signature scheme. You can read more about how you can get    │\n│ ready for the future launch of AA here:                                                          │\n│ https://v2-docs.zksync.io/dev/zksync-v2/aa.html#important-account-abstraction-support            │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> @openzeppelin/contracts/utils/cryptography/ECDSA.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using 'ecrecover' to validate a signature of a user account.      │\n│ zkSync 2.0 will come with the native account abstraction support. It is highly recommended NOT   │\n│ to rely on the fact that the account has an ECDSA private key attached to it, since they may be  │\n│ ruled by a multisig and use another signature scheme. You can read more about how you can get    │\n│ ready for the future launch of AA here:                                                          │\n│ https://v2-docs.zksync.io/dev/zksync-v2/aa.html#important-account-abstraction-support            │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"31","start":6374,"end":6398},"type":"Warning"}],"version":"0.8.16","long_version":"0.8.16+commit.07a7930e.Linux.g++","zk_version":"1.2.0","sources":{},"contracts":{"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"RLPEncoder":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@matterlabs/zksync-contracts/l2/system-contracts/SystemContractsCaller.sol":{"SystemContractsCaller":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"TransactionHelper":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccount.sol":{"IAccount":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"executeTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"executeTransactionFromOutside","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"payForTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_possibleSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"prePaymaster","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateTransaction","outputs":[],"stateMutability":"payable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"IAccountCodeStorage":{"abi":[{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeSize","outputs":[{"internalType":"uint256","name":"codeSize","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"storeCodeHash","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"IContractDeployer":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"deployerAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2Account","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"createAccount","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_senderNonce","type":"uint256"}],"name":"getNewAddressCreate","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"getNewAddressCreate2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"IEthToken":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFromTo","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"IImmutableSimulator":{"abi":[{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getImmutable","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"internalType":"struct ImmutableData[]","name":"immutables","type":"tuple[]"}],"name":"setImmutables","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"IKnownCodesStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"bool","name":"sendBytecodeToL1","type":"bool"}],"name":"MarkedAsKnown","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"getMarker","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"_shouldSendToL1","type":"bool"},{"internalType":"bytes32[]","name":"_hashes","type":"bytes32[]"}],"name":"markFactoryDeps","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"IL1Messenger":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"_hash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"_message","type":"bytes"}],"name":"L1MessageSent","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendToL1","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"INonceHolder":{"abi":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getMinNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"}],"name":"getValueUnderNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"increaseMinNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"incrementDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_expectedNonce","type":"uint256"}],"name":"incrementMinNonceIfEquals","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"setValueUnderNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_key","type":"uint256"},{"internalType":"bool","name":"_shouldBeUsed","type":"bool"}],"name":"validateNonceUsage","outputs":[],"stateMutability":"view","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"IPaymaster":{"abi":[{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"IPaymasterFlow":{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_minAllowance","type":"uint256"},{"internalType":"bytes","name":"_innerInput","type":"bytes"}],"name":"approvalBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"general","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/ISystemContext.sol":{"ISystemContext":{"abi":[{"inputs":[],"name":"baseFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockErgsLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_block","type":"uint256"}],"name":"blockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"coinbase","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"difficulty","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ergsPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_block","type":"uint256"}],"name":"getBlockHashEVM","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumberAndTimestamp","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"msize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"IERC1271":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"view","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"000200000000000200010000000103550000006001100270000002380010019d000000010120018f000000000110004c000000080000c13d08db021a0000040f08db00090000040f00100000000000020000008001000039000000400200003900000000001204350000000001000416000000000110004c0000020b0000c13d00000000010000310000001f03100039000000200400008a000200000004001d000000000443016f00000000080204330000000003840019000000000443004b00000000040000190000000104004039000002390530009c0000020d0000213d000000010440018f000000000440004c0000020d0000c13d00000000003204350000001f0210018f00000001030003670000000504100270000000000540004c0000002e0000613d000000000500001900000005065002100000000007680019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000000260000413d000000000520004c0000003d0000613d0000000504400210000000000343034f00000000044800190000000302200210000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f00000000002404350000023a020000410000003f0310008c000000000300001900000000030220190000023a04100197000000000540004c00000000020080190000023a0440009c000000000203c019000000000220004c000002140000613d00000000040804330000023b0340009c000002160000813d00000000021800190000000001840019000700000002001d000800000008001d08db06b50000040f0000000803000029000500000001001d000000200130003900000000010104330000023b0210009c000002180000813d0000000001310019000000070200002908db06b50000040f000000050400002900000000030404330000023b0230009c000000640000413d000002400100004100000000001004350000004101000039000000040200003900000000001204350000024101000041000008dd00010430000100000003001d000300000001001d0000000301000039000600000001001d08db08d90000040f000000010210018f00000001011002700000007f0310018f000000000420004c000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b0000007f0000613d000002400100004100000000001004350000002201000039000000040200003900000000001204350000024101000041000008dd00010430000000200130008c000000a60000413d000800000003001d000000060100002900000000001004350000023c0100004100008010020000390000000003000415000000100330008a00000020033000c908db08be0000040f000000100100035f000000ff020000390000000f0220024f000000000220004c000001160000613d00000001030000290000001f023000390000000502200270000000200330008c0000000002004019000000000101043b00000008030000290000001f03300039000000050330027000000000033100190000000002210019000000000132004b000000a60000813d000700000003001d000800000002001d0000000001000019000000080200002908db08d70000040f000000080200002900000007030000290000000102200039000000000132004b0000009d0000413d00000001040000290000001f0140008c000000e20000a13d000000060100002900000000001004350000023c01000041000080100200003900000000030004150000000e0330008a00000020033000c908db08be0000040f0000000e0100035f000000ff020000390000000d0220024f000000010220008c000001340000c13d00000002020000290000000103000029000000000323016f0000002005000039000000000201043b000000000130004c0000000506000029000000d10000613d00000020050000390000000004000019000400000003001d000600000004001d000700000005001d000800000002001d0000000001650019000000000101043308db08d70000040f00000006040000290000000506000029000000040300002900000007050000290000000802000029000000200550003900000001022000390000002004400039000000000134004b000000c10000413d0000000104000029000000000143004b0000000003060019000000df0000813d0000000301400210000000f80110018f000000010400008a000000000114022f000000000141013f00000000033500190000000003030433000000000113016f08db08d70000040f000000010400002900000001010000390000000102400210000000ee0000013d000000000140004c0000000001000019000000e80000613d0000000501000029000000200110003900000000010104330000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000000000112019f000000030200003908db08d70000040f00000003010000290000000002010433000002390120009c000000fc0000a13d000002400100004100000000001004350000004101000039000000040200003900000000001204350000024101000041000008dd00010430000400000002001d0000000401000039000600000001001d08db08d90000040f000000010210018f00000001011002700000007f0310018f000000000420004c000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b000001520000613d000002400100004100000000001004350000002201000039000000060200002900000000001204350000024101000041000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000001240000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000011d0000413d000000000420004c000001320000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000001420000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000013b0000413d000000000420004c000001500000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300000000601000029000000200130008c0000017a0000413d000800000003001d000000060100002900000000001004350000023c01000041000080100200003900000000030004150000000c0330008a00000020033000c908db08be0000040f0000000c0100035f000000ff020000390000000b0220024f000000000220004c000001cf0000613d00000004030000290000001f023000390000000502200270000000200330008c0000000002004019000000000101043b00000008030000290000001f03300039000000050330027000000000033100190000000002210019000000000132004b0000017a0000813d000700000003001d000800000002001d0000000001000019000000080200002908db08d70000040f000000080200002900000007030000290000000102200039000000000132004b000001710000413d00000004040000290000001f0140008c000001b90000a13d000000060100002900000000001004350000023c01000041000080100200003900000000030004150000000a0330008a00000020033000c908db08be0000040f0000000a0100035f000000ff02000039000000090220024f000000010220008c000001ed0000c13d00000002020000290000000403000029000000000523016f0000002004000039000000000301043b000000000150004c0000000301000029000001a70000613d00000020040000390000000002000019000500000005001d000600000002001d000700000004001d000800000003001d000000030100002900000000011400190000000001010433000000000203001908db08d70000040f0000000602000029000000050500002900000007040000290000000803000029000000200440003900000001033000390000002002200039000000000152004b0000000301000029000001950000413d0000000402000029000000000125004b000001b60000813d0000000301200210000000f80110018f000000010200008a000000000112022f000000000121013f000000030200002900000000022400190000000002020433000000000112016f000000000203001908db08d70000040f000000040200002900000001010000390000000102200210000001c50000013d000000000140004c0000000001000019000001bf0000613d0000000301000029000000200110003900000000010104330000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000000000112019f000000040200003908db08d70000040f000000200100003900000100020000390000000000120439000001200100003900000000000104390000023f01000041000008dc0001042e00000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000001dd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000001d60000413d000000000420004c000001eb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000001fb0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000001f40000413d000000000420004c000002090000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300000000001000019000008dd00010430000002400100004100000000001004350000004101000039000000040200003900000000001204350000024101000041000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd00010430001e0000000000020000000001000411000800000001001d0000000001000410000080020210008c000002350000613d0000000802000029000080010220008c000002350000613d00000242020000410000000000200439000000040200003900000000001204390000024301000041000080020200003900000000030004150000001e0330008a00000020033000c908db08be0000040f000000ff010000390000001d0110024f000000000110004c000003cc0000613d0000001e0100035f000000000101043b000000000110004c000003ce0000613d001c00400000003d00000080050000390000004001000039000500000001001d00000000005104350000000002000031000000030120008c000003030000a13d001b00000000001d0000000101000367000000000301043b000000e003300270000002440430009c0000029e0000c13d0000000003000416000000000330004c000003510000c13d000000040220008a0000023a030000410000005f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c000003530000613d0000000402100370000000000302043b000002520230009c000003550000813d0000002402100370000000000202043b000200000002001d000002520220009c000003570000813d0000004401100370000000000101043b000700000001001d000600000003001d000000000030043500000001010000390000002002000039000100000001001d000400000002001d00000000001204350000025301000041000080100200003900000000030004150000001a0330008a00000020033000c908db08be0000040f0000001a0100035f000000ff02000039000300000002001d000000190220024f000000010220008c000003590000c13d000000000101043b0000001b0200002900000008030000290000000000320435000000040300002900000000001304350000004001200210000002540110019700000253011001c700008010020000390000000003000415000000180330008a00000020033000c908db08be0000040f000000180100035f0000000302000029000000170220024f000000000220004c000003770000613d000000000101043b08db08d90000040f000000010200008a000000000221004b0000000703000029000002930000613d000000000231004b0000000002030019000003950000413d00000000032100490000000601000029000000080200002908db080f0000040f00000007030000290000000601000029000000020200002908db07130000040f00000005010000290000000001010433000000010200002900000000002104350000004001100210000002540110019700000256011001c7000008dc0001042e000002450430009c000002bb0000213d000700000005001d0000024c0430009c000002d50000a13d0000024d0430009c000003050000613d0000024e0430009c000003a60000613d0000024f0330009c000003030000c13d0000000003000416000000000330004c000003dc0000c13d000000040220008a0000023a030000410000003f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c000004370000c13d0000000001000019000008dd00010430000002460430009c000002eb0000a13d000002470430009c000003190000613d000002480430009c000003ba0000613d000002490330009c000003030000c13d0000000003000416000000000330004c000003de0000c13d000000040220008a0000023a030000410000003f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c0000043e0000c13d0000000001000019000008dd00010430000002500430009c0000032b0000613d000002510330009c000003030000c13d0000000003000416000000000330004c000003d00000c13d000000040220008a0000023a030000410000003f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c000003e40000c13d0000000001000019000008dd000104300000024a0430009c0000033f0000613d0000024b0130009c000003030000c13d0000000001000416000000000110004c000003d20000c13d000000040120008a000000010200008a0000023a03000041000000000221004b000000000200001900000000020320190000023a011001970000023a0410009c00000000030080190000023a011001670000023a0110009c00000000010200190000000001036019000000000110004c000003ea0000c13d0000000001000019000008dd000104300000000001000019000008dd000104300000000001000416000000000110004c000003d40000c13d000000040120008a000000010200008a0000023a03000041000000000221004b000000000200001900000000020320190000023a011001970000023a0410009c00000000030080190000023a011001670000023a0110009c00000000010200190000000001036019000000000110004c000004070000c13d0000000001000019000008dd000104300000000003000416000000000330004c000003d60000c13d000000040220008a0000023a030000410000003f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c000004100000c13d0000000001000019000008dd000104300000000001000416000000000110004c000003d80000c13d000000040120008a000000010200008a0000023a03000041000000000221004b000000000200001900000000020320190000023a011001970000023a0410009c00000000030080190000023a011001670000023a0110009c00000000010200190000000001036019000000000110004c000004170000c13d0000000001000019000008dd000104300000000003000416000000000330004c000003da0000c13d000000040220008a0000023a030000410000001f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c000004310000c13d0000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000003670000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003600000413d000000000420004c000003750000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000003850000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000037e0000413d000000000420004c000003930000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300000000501000029000000000101043300000044021000390000025c03000041000000000032043500000024021000390000001d03000039000000000032043500000259020000410000000000210435000000040210003900000004030000290000000000320435000000400110021000000254011001970000025d011001c7000008dd000104300000000001000416000000000110004c000003e00000c13d000000040120008a000000010200008a0000023a03000041000000000221004b000000000200001900000000020320190000023a011001970000023a0410009c00000000030080190000023a011001670000023a0110009c00000000010200190000000001036019000000000110004c000004440000c13d0000000001000019000008dd000104300000000003000416000000000330004c000003e20000c13d000000040220008a0000023a030000410000003f0420008c000000000400001900000000040320190000023a02200197000000000520004c00000000030080190000023a0220009c00000000020400190000000002036019000000000220004c0000044c0000c13d0000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dc0001042e0000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000001000019000008dd000104300000000402100370000000000202043b000002520320009c000004520000413d0000000001000019000008dd0001043000000005010000290000000001010433000400000001001d0000000401000039000300000001001d08db08d90000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b0000045e0000613d000002400100004100000000001004350000002201000039000000030200002900000000001204350000024101000041000008dd00010430000000020100003908db08d90000040f0000000502000029000000000202043300000000001204350000004001200210000002540110019700000256011001c7000008dc0001042e0000000402100370000000000202043b000700000002001d000002520220009c0000046c0000413d0000000001000019000008dd000104300000000301000039000800000001001d08db08d90000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b000004b20000613d000002400100004100000000001004350000002201000039000000040200003900000000001204350000024101000041000008dd000104300000000401100370000000000101043b000002520210009c000004be0000413d0000000001000019000008dd000104300000000401100370000000000101043b000700000001001d000002520110009c000004d50000413d0000000001000019000008dd000104300000000402100370000000000202043b000002520320009c000005110000413d0000000001000019000008dd0001043000000005010000290000000001010433000000120200003900000000002104350000004001100210000002540110019700000256011001c7000008dc0001042e0000000402100370000000000202043b000002520320009c000005180000413d0000000001000019000008dd000104300000002401100370000000000301043b000000080100002908db080f0000040f00000005010000290000000001010433000000010200003900000000002104350000004001100210000002540110019700000256011001c7000008dc0001042e00000004030000290000000000530435000000000220004c000005240000c13d000001000200008a000000000121016f000000040200002900000020022000390000000000120435000000000150004c00000020010000390000000001006019000800000001001d0000053d0000013d0000002401100370000000000101043b000400000001001d0000000801000029000000000010043500000001020000390000002001000039000600000001001d000300000002001d0000000000210435000002530100004100008010020000390000000003000415000000100330008a00000020033000c908db08be0000040f000000100100035f000000ff02000039000500000002001d0000000f0220024f000000010220008c0000055a0000c13d000000000101043b0000001b0200002900000007030000290000000000320435000000060300002900000000001304350000004001200210000002540110019700000060020000390000001c022001ef0000023e02200197000000000121019f00000255011001c7000080100200003900000000030004150000000e0330008a00000020033000c908db08be0000040f0000000e0100035f00000005020000290000000d0220024f000000000220004c000006250000613d000000000101043b08db08d90000040f0000000402000029000000000221004b0000067f0000813d0000001c01000029000000000101043300000064021000390000025703000041000000000032043500000044021000390000025803000041000000000032043500000024021000390000002503000039000000000032043500000259020000410000000000210435000000040210003900000006030000290000000000320435000000400110021000000254011001970000025a011001c7000008dd0001043000000007030000290000000000530435000000000220004c000005780000c13d000001000200008a000000000121016f000000a0020000390000000000120435000000000150004c000000c001000039000000a001006039000005900000013d000000000010043500000020010000390000000000010435000002530100004100008010020000390000000003000415000000120330008a00000020033000c908db08be0000040f000000120100035f000000ff02000039000000110220024f000000010220008c000005ae0000c13d000000000101043b08db08d90000040f0000001c02000029000000000202043300000000001204350000004001200210000002540110019700000256011001c7000008dc0001042e0000000801000029000000000010043500000001010000390000002002000039000300000001001d000400000002001d0000000000120435000002530100004100008010020000390000000003000415000000160330008a00000020033000c908db08be0000040f000000160100035f000000ff02000039000600000002001d000000150220024f000000010220008c000005d60000c13d000000000101043b0000001b0200002900000007030000290000000000320435000000040300002900000000001304350000004001200210000002540110019700000253011001c700008010020000390000000003000415000000140330008a00000020033000c908db08be0000040f000000140100035f0000000602000029000000130220024f000000000220004c000006430000613d000000000101043b08db08d90000040f00000001020003670000002402200370000000000202043b0000000003120019000000000123004b00000000010000190000000101004039000000010110018f000000000110004c0000068c0000613d0000001b01000029000002400200004100000000002104350000001102000039000000040300003900000000002304350000004001100210000002540110019700000241011001c7000008dd000104300000002401100370000000000101043b000800000001001d000002520110009c000005f40000413d0000000001000019000008dd000104300000002401100370000000000301043b000000080100002908db07130000040f00000005010000290000000001010433000000010200003900000000002104350000004001100210000002540110019700000256011001c7000008dc0001042e0000001b0200002900000003010000290000000000120435000800000002001d000600000005001d000000000152004b0000053d0000813d00000004010000290000002001100039000500000001001d0000025b02000041000700000002001d000000000102001908db08d90000040f0000000803000029000000050200002900000000023200190000000000120435000000070200002900000001022000390000002003300039000800000003001d0000000601000029000000000113004b0000052f0000413d00000008010000290000003f01100039000000200200008a000000000121016f00000004020000290000000002210019000000000112004b000000000100001900000001010040390000000003020019000002390220009c000005cc0000213d000000010110018f000000000110004c000005cc0000c13d0000001c01000029000800000003001d00000000003104350000000001030019000000040200002908db06fc0000040f0000000802000029000000000121004900000060011002100000023e0110019700000040022002100000025402200197000000000121019f000008dc0001042e00000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000005680000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000005610000413d000000000420004c000005760000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000008010000290000000000100435000000bf01000039000800000001001d000000a003000039000000000150004c0000059f0000613d0000025e030000410000000001000019000600000005001d000800000003001d000700000001001d000000000103001908db08d90000040f00000007040000290000000803000029000000a0024000390000000000120435000000010330003900000020014000390000000602000029000000000221004b000005820000413d000000c0014000390000001f02100039000000200100008a000800000002001d000000000112016f0000000003010019000000800110008a0000025f0110009c0000059f0000a13d000002400100004100000000001004350000004101000039000000040200003900000000001204350000024101000041000008dd000104300000000501000029000700000003001d00000000003104350000008002000039000000000103001908db06fc0000040f0000000702000029000000000121004900000060011002100000023e01100197000000080200002900000040022002100000026002200197000000000121019f000008dc0001042e00000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000005bc0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000005b50000413d000000000420004c000005ca0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300000001b01000029000002400200004100000000002104350000004102000039000000030300002900000000002304350000004001100210000002540110019700000241011001c7000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000005e40000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000005dd0000413d000000000420004c000005f20000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd00010430000000000020043500000001010000390000002002000039000600000002001d00000000001204350000025301000041000080100200003900000000030004150000000c0330008a00000020033000c908db08be0000040f0000000c0100035f000000ff02000039000700000002001d0000000b0220024f000000010220008c000006610000c13d000000000101043b0000001b0200002900000008030000290000000000320435000000060300002900000000001304350000004001200210000002540110019700000060020000390000001c022001ef0000023e02200197000000000121019f00000255011001c7000080100200003900000000030004150000000a0330008a00000020033000c908db08be0000040f0000000a0100035f0000000702000029000000090220024f000000000220004c000006970000613d000000000101043b08db08d90000040f0000001c02000029000000000202043300000000001204350000004001200210000002540110019700000256011001c7000008dc0001042e00000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000006330000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000062c0000413d000000000420004c000006410000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000006510000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000064a0000413d000000000420004c0000065f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c0000066f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006680000413d000000000420004c0000067d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd00010430000000040200002900000000032100490000000801000029000000070200002908db080f0000040f0000001c010000290000000001010433000000030200002900000000002104350000004001100210000002540110019700000256011001c7000008dc0001042e0000000801000029000000070200002908db080f0000040f00000005010000290000000001010433000000030200002900000000002104350000004001100210000002540110019700000256011001c7000008dc0001042e00000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000006a50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000069e0000413d000000000420004c000006b30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300000001f031000390000023a04000041000000000523004b000000000500001900000000050440190000023a062001970000023a03300197000000000763004b000000000400a019000000000363013f0000023a0330009c00000000030500190000000003046019000000000330004c000006ea0000613d00000000040104330000023b0340009c000006ec0000813d0000003f03400039000000200500008a000000000653016f000000400500003900000000030504330000000006630019000000000736004b00000000070000190000000107004039000002390860009c000006f30000213d000000010770018f000000000770004c000006f30000c13d0000000000650435000000000043043500000000054100190000002005500039000000000225004b000006fa0000213d000000000240004c000006e50000613d000000000200001900000020022000390000000005320019000000000612001900000000060604330000000000650435000000000542004b000006de0000413d0000000001340019000000200110003900000000000104350000000001030019000000000001042d0000000001000019000008dd00010430000002400100004100000000001004350000004101000039000000040200003900000000001204350000024101000041000008dd00010430000002400100004100000000001004350000004101000039000000040200003900000000001204350000024101000041000008dd000104300000000001000019000008dd00010430000000200300003900000000003104350000000003020433000000200410003900000000003404350000004001100039000000000430004c0000070c0000613d000000000400001900000000054100190000002004400039000000000624001900000000060604330000000000650435000000000534004b000007050000413d000000000231001900000000000204350000001f02300039000000200300008a000000000232016f0000000001210019000000000001042d000c0000000000020000026104100197000000000140004c000007790000613d000600000003001d0000026101200197000300000001001d000000000110004c0000078d0000613d000400000004001d00000000004004350000002001000039000200000001001d00000000000104350000025301000041000080100200003900000000030004150000000c0330008a00000020033000c908db08be0000040f0000000c0100035f000000ff02000039000500000002001d0000000b0220024f000000010220008c000007a10000c13d000000000101043b08db08d90000040f00000000020100190000000601000029000100000002001d000000000112004b000007bf0000413d00000004010000290000000000100435000000020100002900000000000104350000025301000041000080100200003900000000030004150000000a0330008a00000020033000c908db08be0000040f0000000a0200035f0000000501000029000000090110024f000000010110008c000007d30000c13d000000060100002900000001030000290000000001130049000000000202043b08db08d70000040f00000003010000290000000000100435000002530100004100008010020000390000000003000415000000080330008a00000020033000c908db08be0000040f000000080100035f0000000502000029000000070220024f000000000220004c000007f10000613d000000000101043b000500000001001d08db08d90000040f00000006020000290000000001210019000000050200002908db08d70000040f000000400100003900000000010104330000000602000029000000000021043500000262020000410000026303000041000000000023041f00000004020000290000000303000029000000000032041e000000210200008a000000000221004b000007770000213d00000020021000390000076f0000013d000000000003041e0000004001100039000000000312004b000007770000a13d000000000412004900000000030104330000003f0440008c0000076b0000a13d00000020041000390000000004040433000000000043041e0000076c0000013d0000000c00000005000000000001042d0000004001000039000000000101043300000064021000390000026803000041000000000032043500000044021000390000026903000041000000000032043500000024021000390000002503000039000000000032043500000259020000410000000000210435000000040210003900000020030000390000000000320435000000400110021000000254011001970000025a011001c7000008dd000104300000004001000039000000000101043300000064021000390000026603000041000000000032043500000044021000390000026703000041000000000032043500000024021000390000002303000039000000000032043500000259020000410000000000210435000000040210003900000020030000390000000000320435000000400110021000000254011001970000025a011001c7000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000007af0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007a80000413d000000000420004c000007bd0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300000004001000039000000000101043300000064021000390000026403000041000000000032043500000044021000390000026503000041000000000032043500000024021000390000002603000039000000000032043500000259020000410000000000210435000000040210003900000002030000290000000000320435000000400110021000000254011001970000025a011001c7000008dd0001043000000060012002700000001f0110018f00000065032002700000023d03300197000000000430004c000007e10000613d00000000040000190000000505400210000000000652034f000000000606043b00000000006504350000000104400039000000000534004b000007da0000413d000000000410004c000007ef0000613d00000003011002100000000503300210000000000403043300000000041401cf000000000414022f000000000532034f000000000505043b0000010001100089000000000515022f00000000011501cf000000000141019f00000000001304350000023e01200197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000007ff0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007f80000413d000000000420004c0000080d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300009000000000002000500000003001d0000026103100197000000000130004c0000085a0000613d0000026101200197000400000001001d000000000110004c0000086e0000613d000100000003001d000000000030043500000001010000390000002002000039000300000002001d0000000000120435000002530100004100008010020000390000000003000415000000090330008a00000020033000c908db08be0000040f000000090100035f000000ff02000039000200000002001d000000080220024f000000010220008c000008820000c13d000000000101043b0000000402000029000000000020043500000003020000290000000000120435000002530100004100008010020000390000000003000415000000070330008a00000020033000c908db08be0000040f000000070100035f0000000202000029000000060220024f000000000220004c000008a00000613d000000000201043b000000050100002908db08d70000040f00000040010000390000000001010433000000050200002900000000002104350000026a020000410000026303000041000000000023041f00000001020000290000000403000029000000000032041e000000210200008a000000000221004b000008580000213d0000002002100039000008500000013d000000000003041e0000004001100039000000000312004b000008580000a13d000000000412004900000000030104330000003f0440008c0000084c0000a13d00000020041000390000000004040433000000000043041e0000084d0000013d0000000900000005000000000001042d0000004001000039000000000101043300000064021000390000026d03000041000000000032043500000044021000390000026e03000041000000000032043500000024021000390000002403000039000000000032043500000259020000410000000000210435000000040210003900000020030000390000000000320435000000400110021000000254011001970000025a011001c7000008dd000104300000004001000039000000000101043300000064021000390000026b03000041000000000032043500000044021000390000026c03000041000000000032043500000024021000390000002203000039000000000032043500000259020000410000000000210435000000040210003900000020030000390000000000320435000000400110021000000254011001970000025a011001c7000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000008900000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008890000413d000000000420004c0000089e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd0001043000000060021002700000001f0220018f00000065031002700000023d03300197000000000430004c000008ae0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008a70000413d000000000420004c000008bc0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000023e01100197000008dd000104300002000000000002000200000003001d0000002003300039000100000003001d000008cd002104230000000203000029000000200230011a00000000020103550000023a010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000026f010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d000008db00000432000008dc0001042e000008dd000104300000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000ffffffffffffffff80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000020000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff00000000000000000000000000000000ffffffff00000000000000000000000000000002000000000000000000000000000000400000010000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000023b872dd0000000000000000000000000000000000000000000000000000000070a0823000000000000000000000000000000000000000000000000000000000a457c2d600000000000000000000000000000000000000000000000000000000a457c2d700000000000000000000000000000000000000000000000000000000a9059cbb00000000000000000000000000000000000000000000000000000000dd62ed3e0000000000000000000000000000000000000000000000000000000070a082310000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddc0000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000395093510000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000095ea7b3000000000000000000000001000000000000000000000000000000000000000002000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000207a65726f00000000000000000000000000000000000000000000000000000045524332303a2064656372656173656420616c6c6f77616e63652062656c6f7708c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000000000000008a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b45524332303a20696e73756666696369656e7420616c6c6f77616e63650000000000000000000000000000000000000000000064000000000000000000000000c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b000000000000000000000000000000000000000000000000ffffffffffffff7f0000000000000000000000000000000000000000ffffffe00000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0000000000000000000000000000000000000000000000000000002000000003616c616e6365000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220616d6f756e7420657863656564732062657373000000000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220746f20746865207a65726f2061646472647265737300000000000000000000000000000000000000000000000000000045524332303a207472616e736665722066726f6d20746865207a65726f2061648c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925737300000000000000000000000000000000000000000000000000000000000045524332303a20617070726f766520746f20746865207a65726f206164647265726573730000000000000000000000000000000000000000000000000000000045524332303a20617070726f76652066726f6d20746865207a65726f206164647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0100027134af135a043a13e5ed3a23bf12bd6888c16fd74396e9c256c378bab1"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"01000353d841a9513bbb74c9ea4965b67615972e1ffd59b84ae10699118ba515"}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[]}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"contracts/Account.sol":{"SAccount":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"executeTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"executeTransactionFromOutside","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"payForTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"prePaymaster","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"000400000000000200020000000103550000006003100270000003c10030019d000003c103300197000000000131034f00030000000103550000006001100270000103c10010019d000000010120018f000000000110004c0000000d0000c13d0efd00610000040f0efd000e0000040f0000000001000416000000000110004c0000001e0000c13d0000000001000031000000bf02100039000000200300008a000000000232016f0000009f0320008c000000200000213d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff00010430000000000100001900000eff00010430000000400300003900000000002304350000001f0210018f00000002030003670000000504100270000000000540004c000000300000613d00000000050000190000000506500210000000000763034f000000000707043b000000a00660003900000000007604350000000105500039000000000645004b000000280000413d000000000520004c0000003f0000613d0000000504400210000000000343034f0000000302200210000000a004400039000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f0000000000240435000003c2020000410000001f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c0000004d0000c13d000000000100001900000eff00010430000000a0010000390000000001010433000003c30210009c000000530000413d000000000100001900000eff00010430000000800200003900000000001204350000014002000039000000000002043900000160020000390000000000120439000000200100003900000100020000390000000000120439000000010100003900000120020000390000000000120439000003c40100004100000efe0001042e000800000000000200000000080004110000000001000410000080020210008c0000007c0000613d000080010280008c0000007c0000613d000400000008001d000003c702000041000000000020043900000004020000390000000000120439000003c80100004100008002020000390000000003000415000000080330008a00000020033000c90efd0ecb0000040f000000ff01000039000000070110024f000000000110004c000001060000613d000000080100035f000000000101043b000000000110004c0000000408000029000001080000613d0000008001000039000000400700003900000000001704350000000001000031000000030210008c000000ef0000a13d0000000203000367000000000203043b000000e002200270000003c90420009c000000e10000c13d000000040210008a000003c2040000410000005f0520008c00000000050000190000000005042019000003c202200197000000000620004c0000000004008019000003c20220009c00000000020500190000000002046019000000000220004c000000f60000613d0000002402300370000000000402043b0000004402300370000000000302043b000003d00230009c000000f80000813d000400000004001d000300000007001d0000000402300039000100000002001d0000000001210049000003c202000041000200000003001d0000025f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c000000fa0000613d000080010180008c000000000100001900000001010060390efd04000000040f0000000001000414000000030500002900000000020504330000002003200039000003d1040000410000000000430435000000020300002900000104033000390000000204000367000000000334034f000000000303043b0000002404200039000000000034043500000024030000390000000000320435000000610300008a000000000332004b000000fc0000213d0000006003200039000003d00430009c000000fc0000813d0000000000350435000003c1011001970efd04b30000040f0000000401000029000000000210004c0000000102000029000000cf0000c13d00000000010200190efd050f0000040f0000000102000029000400000001001d000500000000001d000600000000001d0000000201000029000001e4031000390000000001000415000000060110008a00000020011000c90efd04270000040f0000000602000029000000050300002900000004010000290efd0d4f0000040f000000030100002900000000010104330000004001100210000003d20110019700000efe0001042e000003ca0120009c000000ea0000a13d000003cb0120009c000001030000613d000003cc0120009c000001040000613d000003cd0120009c000000f40000c13d0efd02640000040f000003ce0120009c000001050000613d000003cf0120009c000000f40000c13d0efd017f0000040f000000000110004c000000f40000c13d0efd0ea70000040f000000000100001900000efe0001042e000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300efd01960000040f0efd020d0000040f0efd013a0000040f000000000100001900000eff00010430000000000100001900000efe0001042e000000040320008a000003c2040000410000005f0530008c00000000050000190000000005042019000003c203300197000000000630004c0000000004008019000003c20330009c00000000030500190000000003046019000000000330004c000001340000613d00000002030003670000000404300370000000000404043b000000200510011a000000000504001f0000002404300370000000000404043b000100000504001f0000004403300370000000000303043b000003d00430009c000001360000813d00000004033000390000000002320049000003c2040000410000025f0520008c00000000050000190000000005042019000003c202200197000000000620004c0000000004008019000003c20220009c00000000020500190000000002046019000000000220004c000001380000613d000000200210011a000200000203001f000000000001042d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff000104300000000001000416000000000110004c0000014d0000c13d0000000001000031000000040210008a000003c2030000410000003f0420008c00000000040000190000000004032019000003c202200197000000000520004c0000000003008019000003c20220009c00000000020400190000000002036019000000000220004c0000014f0000c13d000000000100001900000eff00010430000000000100001900000eff0001043000000002040003670000002402400370000000000202043b000003d00320009c000001560000413d000000000100001900000eff000104300000002303200039000003c205000041000000000613004b00000000060000190000000006054019000003c207100197000003c203300197000000000873004b000000000500a019000000000373013f000003c20330009c00000000030600190000000003056019000000000330004c0000016c0000613d0000000403200039000000000334034f000000000303043b000003d00530009c0000016e0000413d000000000100001900000eff00010430000000000100001900000eff0001043000000024022000390000000005320019000000000115004b000001740000a13d000000000100001900000eff000104300000000401400370000000000101043b0efd0d4f0000040f00000040010000390000000001010433000003d30200004100000000002104350000004001100210000003d201100197000003d4011001c700000efe0001042e0004000000000002000200000000001d000300000000001d000400000000001d00000000020000310000000001000415000000040110008a00000020011000c90efd010a0000040f0000000201000029000100000001001d0000000001000411000080010110008c000000000100001900000001010060390efd04000000040f00000001010000290efd0c810000040f000000400100003900000000010104330000004001100210000003d20110019700000efe0001042e0005000000000002000000040100008a0000000001100031000003c2020000410000005f0310008c00000000030000190000000003022019000003c204100197000000000540004c0000000002008019000003c20440009c000000000203c019000000000220004c000002070000613d00000002020003670000004402200370000000000302043b000003d00230009c000002090000813d000100000003001d0000000001310049000003c2020000410000025f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c0000020b0000613d0000000001000411000080010110008c000000000100001900000001010060390efd04000000040f0000000104000029000000a4014000390000000202000367000000000312034f0000006401400039000000000112034f000000000101043b000000000203043b000000000320004c000001d10000613d000000010300008a00000000432300d9000000000331004b000001d10000a13d000003c5010000410000000000100435000000110100003900000004020000390000000000120435000003c60100004100000eff0001043000000000132100a90000000001000414000000c001100210000003d501100197000000000230004c000001de0000c13d00008001020000390000000003000415000000050330008a00000020033000c9000100000003001d0efd0eb20000040f000001e60000013d000003d6011001c7000080090200003900008001040000390000000005000415000000030550008a00000020055000c9000100000005001d0efd0ee40000040f000000ff010000390000000102000029000000200220011a000000010312025f000000000102036700030000000103550000006001100270000103c10010019d00000040010000390000000001010433000000000230004c000001f50000613d0000004001100210000003d20110019700000efe0001042e0000006402100039000003d70300004100000000003204350000004402100039000003d8030000410000000000320435000000240210003900000025030000390000000000320435000003d90200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003d201100197000003da011001c700000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff0001043000070000000000020000000001000031000000040210008a000003c2030000410000001f0420008c00000000040000190000000004032019000003c202200197000000000520004c0000000003008019000003c20220009c00000000020400190000000002036019000000000220004c0000021e0000c13d000000000100001900000eff0001043000000002020003670000000402200370000000000602043b000003d00260009c000002250000413d000000000100001900000eff0001043000000004056000390000000001510049000003c2020000410000025f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c000002350000c13d000000000100001900000eff000104300000000001000414000300000001001d0000004001000039000400000001001d0000000001010433000100000001001d0000002003100039000003d102000041000000000023043500000104036000390000000202000367000000000232034f000000000302043b0000002402100039000000000032043500000024020000390000000000210435000500000005001d000200000006001d0efd04170000040f0000000301000029000003c10110019700000001020000290efd04b30000040f00000005010000290efd050f0000040f0000000202000029000001e403200039000600000000001d000700000000001d000300000001001d0000000001000415000000070110008a00000020011000c900000005020000290efd04270000040f0000000702000029000000060300002900000003010000290efd0d4f0000040f00000005010000290efd0c810000040f000000040100002900000000010104330000004001100210000003d20110019700000efe0001042e00110000000000020000000001000031000000040210008a000003c2030000410000005f0420008c00000000040000190000000004032019000003c202200197000000000520004c0000000003008019000003c20220009c00000000020400190000000002036019000000000220004c000003e70000613d00000002020003670000004402200370000000000302043b000003d00230009c000003e90000813d0000000402300039000500000002001d0000000001210049000003c202000041000300000003001d0000025f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c000003eb0000613d0000000001000411000080010110008c000000000100001900000001010060390efd04000000040f001000000000001d001100000000001d00000003010000290000022403100039000400000003001d0000000001000415000000110110008a00000020011000c900000005020000290efd04270000040f0000001001000029000000030110008c000000000100001900000001010020390efd0e860000040f000e00000000001d000f00000000001d00000000010004150000000f0110008a00000020011000c9000000050200002900000004030000290efd04270000040f0000000e01000029000000030110008c000003ed0000a13d00000002010003670000000f01100360000000000101043b000003db01100197000003dc0210009c000003ef0000c13d000c00000000001d000d00000000001d00000000010004150000000d0110008a00000020011000c9000000050200002900000004030000290efd04270000040f0000000c01000029000000430110008c000002ba0000213d000000000100001900000eff000104300000000d0100002900000004031000390000000202000367000000000332034f000000000603043b000003c30360009c000002c30000413d000000000100001900000eff000104300000000303000029000000e403300039000000000332034f0000002401100039000000000112034f000000000701043b000000000203043b0000004005000039000000000a050433000003df0100004100000000001a04350000000001000410000003e0031001970000000404a0003900000000010004140000000000340435000003e0082001970000002402a000390000000000820435000000040260008c000002da0000c13d0000000102000031000003060000013d000200000008001d000300000007001d000500000005001d000000c001100210000003d5011001970000004002a00210000003d202200197000000000112019f000003e1011001c700000000030004150000000b0330008a00000020033000c9000400000006001d000000000206001900010000000a001d0efd0ecb0000040f000000010a000029000000ff010000390000000a0110024f0000000b0200035f0000000003000019000000050430021000000000054a0019000000000442034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000002ef0000c13d00030000000203550000006002200270000103c10020019d000003c102200197000000000110004c00000005050000290000000406000029000000030700002900000002080000290000032a0000613d000000200120008c000000200100003900000000010240190000001f02100039000000600220018f0000000009a20019000000000229004b00000000020000190000000102004039000003e20390009c000003230000213d000000010220018f000000000220004c000003230000c13d0000000000950435000003c2020000410000001f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c0000032b0000c13d000000000100001900000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300efd0e1f0000040f00000000010a0433000000000171004b000003e20000813d000003e301000041000000000019043500000004029000390000000001000414000000000082043500000024029000390000000000020435000000040260008c000003390000c13d0000000102000031000003650000013d000200000008001d000300000007001d000500000005001d000000c001100210000003d5011001970000004002900210000003d202200197000000000112019f000003e1011001c70000000003000415000000090330008a00000020033000c9000400000006001d0000000002060019000100000009001d0efd0eb20000040f0000000109000029000000ff01000039000000080110024f000000090200035f000000000300001900000005043002100000000005490019000000000442034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c00000000030400190000034e0000c13d00030000000203550000006002200270000103c10020019d000003c102200197000000000110004c0000000505000029000000040600002900000003070000290000000208000029000003830000613d000000200120008c000000200100003900000000010240190000001f02100039000000600220018f000000000a920019000003d002a0009c000003740000413d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300000000000a50435000003c2020000410000001f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c000003840000c13d000000000100001900000eff000104300efd0e1f0000040f0000000001090433000000000210004c0000000002000019000000010200c039000000000121004b000003950000c13d000003e30100004100000000001a04350000002402a00039000000000100041400000000007204350000000402a000390000000000820435000000040260008c000003970000c13d0000000102000031000003bd0000013d000000000100001900000eff00010430000500000005001d000000c001100210000003d5011001970000004002a00210000003d202200197000000000112019f000003e1011001c70000000003000415000000070330008a00000020033000c9000000000206001900040000000a001d0efd0eb20000040f000000040a000029000000ff01000039000000060110024f000000070200035f0000000003000019000000050430021000000000054a0019000000000442034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000003a90000c13d00030000000203550000006002200270000103c10020019d000003c102200197000000000110004c0000000505000029000003db0000613d000000200120008c000000200100003900000000010240190000001f02100039000000600220018f0000000009a20019000003d00290009c000003cc0000413d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300000000000950435000003c2020000410000001f0310008c00000000030000190000000003022019000003c201100197000000000410004c0000000002008019000003c20110009c00000000010300190000000001026019000000000110004c000003dc0000c13d000000000100001900000eff000104300efd0e1f0000040f00000000010a0433000000000210004c0000000002000019000000010200c039000000000121004b000003e50000c13d0000004001900210000003d20110019700000efe0001042e000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff0001043000000040020000390000000009020433000003dd0110009c000003e20000613d000003d90100004100000000001904350000000401900039000100000009001d0efd0e9d0000040f000000010200002900000000012100490000006001100210000003de011001970000004002200210000003d202200197000000000121019f00000eff00010430000000000110004c000004030000613d000000000001042d000000400100003900000000010104330000006402100039000003e40300004100000000003204350000004402100039000003e5030000410000000000320435000000240210003900000024030000390000000000320435000003d90200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003d201100197000003da011001c700000eff00010430000000610200008a000000000221004b000004200000213d0000006001100039000003d00210009c000004200000813d00000040020000390000000000120435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff00010430000000000400003100000000052400490000001f0650008a0000000205000367000000000335034f000000000303043b000003c207000041000000000863004b00000000080000190000000008074019000003c206600197000003c209300197000000000a69004b000000000700a019000000000669013f000003c20660009c00000000060800190000000006076019000000000660004c000004550000613d0000000002230019000000000325034f000000000303043b000000200510011a000100000503001f000003d00530009c000004570000813d000000200510011a000000200520003f00000000033400490000002002200039000003c204000041000000000532004b0000000005000019000000000504a019000003c203300197000003c202200197000000000632004b000000000400a019000000000232013f000003c20220009c00000000020500190000000002046019000000000220004c000004590000613d000000000001042d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff0001043000000040020000390000000001020433000000410300008a000000000331004b000004780000213d0000004003100039000003d00430009c000004780000813d000000000032043500000001020000390000000000210435000000200210003900000002030003670000000003300368000000000400001900000005054002100000000006520019000000000553034f000000000505043b00000000005604350000000105400039000000000445004b00000000040000190000000104004039000000010440018f000000000440004c00000000040500190000046a0000c13d000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300000000002010019000003d00120009c000004a50000813d0000003f01200039000000200300008a000000000431016f000000400300003900000000010304330000000004410019000000000514004b00000000050000190000000105004039000003e20640009c000004ac0000213d000000010550018f000000000550004c000004ac0000c13d0000000000430435000000000021043500000002040003670000001f022000390000000502200270000000000320004c000004a20000613d00000020031000390000000004400368000000000500001900000005065002100000000007630019000000000664034f000000000606043b00000000006704350000000105500039000000000625004b0000049a0000413d000000000200004c000004a40000613d000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300003000000000002000000c4011002100000004003200210000003e603300041000000000131019f00000000020204330000006002200210000003e702200197000000000121019f000003e8011001c700008003020000390000000005000415000000030550008a00000020055000c9000000000300001900000000040000190efd0ee40000040f000000030700035f00030000000703550000006002700270000103c10020019d000003c101200197000000ff02000039000000020220024f000000000220004c000004f20000613d000100000001001d0efd047f0000040f00000001030000290000001f0230018f00000000003104350000000004030019000000200110003900000003030003670000000504400270000000000540004c000004e10000613d000000000500001900000005065002100000000007610019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000004d90000413d000000000520004c000004f00000613d0000000504400210000000000343034f00000000014100190000000302200210000000000401043300000000042401cf000000000424022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000242019f00000000002104350000000300000005000000000001042d0000001f0310018f00000000080100190000000502100270000000000420004c000004ff0000613d00000000040000190000000505400210000000000657034f000000000606043b00000000006504350000000104400039000000000524004b000004f80000413d000000000430004c0000050d0000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000127034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600180021000000eff0001043000140000000000020000000202000367000000000212034f000000000302043b000000000230004c000005170000c13d0efd09ad0000040f000005d10000013d000000710230008c0000051b0000c13d0efd06970000040f000005d10000013d000800000001001d000000020130008c000005d30000c13d000003e9010000410000000000100439000003ea010000410000800b020000390000000003000415000000140330008a00000020033000c90efd0ecb0000040f000000ff01000039000300000001001d000000130110024f000000010110008c000005d50000c13d000000140100035f000000000101043b0efd0ab40000040f0000000802000029000001000220003900000002030003670007000000030353000000000223034f000000000202043b000600000001001d00000000010200190efd0ab40000040f0000000802000029000000c002200039000000070300035f000000000223034f000000000202043b000500000001001d00000000010200190efd0ab40000040f0000000802000029000000a002200039000000070300035f000000000223034f000000000202043b000400000001001d00000000010200190efd0ab40000040f00000008020000290000006002200039000000070300035f000000000223034f000000000202043b000200000001001d00000000010200190efd0ab40000040f00000008020000290000004002200039000000070300035f000000000223034f000000000202043b000003e002200197000700000001001d00000000010200190efd0a9a0000040f000000080200002900000120022000390000000203000367000000000223034f000000000202043b000100000001001d00000000010200190efd0ab40000040f00000000070100190000000601000029000000050200002900000004030000290000000204000029000000070500002900000001060000290efd0b970000040f001100000000001d001200000000001d000600000001001d0000000802000029000001c0032000390000000001000415000000120110008a00000020011000c9000700000003001d0efd04270000040f0000001101000029000000010210008c000005930000c13d000900000000001d000a00000000001d00000000010004150000000a0110008a00000020011000c9000000080200002900000007030000290efd04270000040f0000000901000029000000000110004c000005d70000613d00000002010003670000000a01100360000000000101043b000000010200008a000003c203000041000000000221004b00000000020000190000000002032019000003c201100197000003c20410009c0000000003008019000003c201100167000003c20110009c00000000020360190000006001000039000000000220004c000005950000c13d0efd08d20000040f000005950000013d00000007020000290efd0aef0000040f000500000001001d0efd0b310000040f00000006020000290000000002020433000200000002001d00000005020000290000000002020433000100000002001d000f00000000001d001000000000001d000400000001001d0000000001000415000000100110008a00000020011000c9000000080200002900000007030000290efd04270000040f0000000201000029000000010200002900000000011200190000000f011000290000000402000029000000000202043300000000012100190efd0b420000040f000d00000000001d000e00000000001d000200000001001d00000000010004150000000e0110008a00000020011000c9000000080200002900000007030000290efd04270000040f0000000e040000290000000d0500002900000002010000290000000602000029000000050300002900000004060000290efd0c0e0000040f0000004002100210000003e602200041000003d20220019700000000010104330000006001100210000003de01100197000000000121019f000003d6011001c7000080100200003900000000030004150000000c0330008a00000020033000c90efd0ecb0000040f0000000c0100035f00000003020000290000000b0220024f000000000220004c000005de0000613d000000000101043b0000001400000005000000000001042d000000000100001900000eff00010430000000000100001900000eff00010430000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c000005ec0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000005e50000413d000000000420004c000005fa0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff000104300000000004010019000003d00120009c000006340000813d0000003f01200039000000200500008a000000000651016f000000400500003900000000010504330000000006610019000000000716004b00000000070000190000000107004039000003e20860009c0000063b0000213d000000010770018f000000000770004c0000063b0000c13d000000000065043500000000002104350000000005420019000000000335004b000006420000213d0000000203000367000000000543034f0000001f0420018f00000020031000390000000506200270000000000760004c000006220000613d000000000700001900000005087002100000000009830019000000000885034f000000000808043b00000000008904350000000107700039000000000867004b0000061a0000413d000000000740004c000006310000613d0000000506600210000000000565034f00000000066300190000000304400210000000000706043300000000074701cf000000000747022f000000000505043b0000010004400089000000000545022f00000000044501cf000000000474019f000000000046043500000000022300190000000000020435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff00010430000000000100001900000eff00010430000000000400003100000000052400490000001f0650008a0000000205000367000000000335034f000000000303043b000003c207000041000000000863004b00000000080000190000000008074019000003c206600197000003c209300197000000000a69004b000000000700a019000000000669013f000003c20660009c00000000060800190000000006076019000000000660004c000006730000613d0000000002230019000000000325034f000000000303043b000000200510011a000100000503001f000003d00530009c000006750000813d000000200510011a000000200520003f000000050330021000000000033400490000002002200039000003c204000041000000000532004b0000000005000019000000000504a019000003c203300197000003c202200197000000000632004b000000000400a019000000000232013f000003c20220009c00000000020500190000000002046019000000000220004c000006770000613d000000000001042d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000001a00f1000390000000000ef0435000001800e1000390000000000de0435000001600d1000390000000000cd0435000001400c1000390000000000bc0435000001200b1000390000000000ab0435000001000a10003900000000009a0435000000e0091000390000000000890435000000c0081000390000000000780435000000a007100039000000000067043500000080061000390000000000560435000000600510003900000000004504350000004004100039000000000034043500000020031000390000000000230435000003ec020000410000000000210435000001c001100039000000000001042d001b0000000000020000000002010019001a00000000001d001b00000000001d000001c00320003900000000010004150000001b0110008a00000020011000c9000500000002001d0efd04270000040f0000001b010000290000001a0200002900000000030000310efd05fc0000040f0000004002100210000003e602200041000003d20220019700000000010104330000006001100210000003de01100197000000000121019f000003d6011001c700008010020000390000000003000415000000190330008a00000020033000c90efd0ecb0000040f000000190100035f000000ff02000039000700000002001d000000180220024f000000010220008c000007c80000c13d000000000101043b000400000001001d001600000000001d001700000000001d000000050200002900000200032000390000000001000415000000170110008a00000020011000c90efd06440000040f000000400900003900000000010904330000001603000029000003ed0230009c000007e60000813d000000200210003900000002040003670000001704400360000003ee05300197000000000650004c000006d60000613d000000000600001900000005076002100000000008720019000000000774034f000000000707043b00000000007804350000000106600039000000000756004b000006ce0000413d0000000503300210000000000400004c000006d90000613d00000000003104350000003f03300039000000200400008a000300000004001d000000000443016f0000000003140019000000000443004b00000000040000190000000104004039000003e20530009c000007e80000213d000000010440018f000000000440004c000007e80000c13d000600000009001d00000000003904350000004002200210000003d20220019700000000010104330000006001100210000003de01100197000000000112019f000003d6011001c700008010020000390000000003000415000000150330008a00000020033000c90efd0ecb0000040f000000150100035f0000000702000029000000140220024f000000000220004c000007ef0000613d000000000101043b000200000001001d001200000000001d001300000000001d000000050200002900000220032000390000000001000415000000130110008a00000020011000c90efd04270000040f0000001301000029000000120200002900000000030000310efd05fc0000040f0000004002100210000003e602200041000003d20220019700000000010104330000006001100210000003de01100197000000000121019f000003d6011001c700008010020000390000000003000415000000110330008a00000020033000c90efd0ecb0000040f000000110100035f0000000702000029000000100220024f000000000220004c0000080d0000613d0000000509000029000000c0029000390000000203000367000000000823034f000000e002900039000000000523034f0000010002900039000000000623034f0000012002900039000000000723034f0000002002900039000000000c23034f0000004002900039000000000d23034f0000006002900039000000000e23034f0000008002900039000000000f23034f000000a002900039000000000423034f000000000293034f000000000202043b000000000b07043b000000000a06043b000000000905043b000000000808043b000000000704043b00000000060f043b00000000050e043b00000000040d043b00000000030c043b000000000e01043b00000006010000290000000001010433000500000001001d0000002001100039000100000001001d000000040c000029000000020d0000290efd06790000040f00000005040000290000000001410049000000200210008a00000000002404350000001f011000390000000302000029000000000221016f0000000001420019000000000221004b00000000020000190000000102004039000003e20310009c0000082b0000213d000000010220018f000000000220004c0000082b0000c13d0000000602000029000000000012043500000001010000290000004001100210000003d20110019700000000020404330000006002200210000003de02200197000000000121019f000003d6011001c7000080100200003900000000030004150000000f0330008a00000020033000c90efd0ecb0000040f0000000f0100035f00000007020000290000000e0220024f000000000220004c000008320000613d000000000101043b000400000001001d00000006010000290000000001010433000500000001001d000003e9010000410000000000100439000003ea010000410000800b0200003900000000030004150000000d0330008a00000020033000c90efd0ecb0000040f00000007010000290000000c0110024f000000000110004c000008500000613d000000050400002900000020014000390000000d0200035f000000000202043b000003ef030000410000000000310435000000800340003900000000002304350000006002400039000003f00300004100000000003204350000004002400039000003f103000041000000000032043500000080020000390000000000240435000000a10200008a000000000224004b000008520000213d000000a002400039000003d00320009c000008520000813d000000060300002900000000002304350000004001100210000003d20110019700000000020404330000006002200210000003de02200197000000000121019f000003d6011001c7000080100200003900000000030004150000000b0330008a00000020033000c90efd0ecb0000040f0000000b0100035f00000007020000290000000a0220024f000000000220004c000008590000613d000000000301043b000000060500002900000000010504330000004202100039000000040400002900000000004204350000002002100039000003f20400004100000000004204350000002204100039000000000034043500000042030000390000000000310435000000810300008a000000000331004b000008770000213d0000008003100039000003d00430009c000008770000813d00000000003504350000004002200210000003d20220019700000000010104330000006001100210000003de01100197000000000112019f000003d6011001c700008010020000390000000003000415000000090330008a00000020033000c90efd0ecb0000040f000000090100035f0000000702000029000000080220024f000000000220004c0000087e0000613d000000000101043b0000001b00000005000000000001042d00000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c000007d60000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007cf0000413d000000000420004c000007e40000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff00010430000000000100001900000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c000007fd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007f60000413d000000000420004c0000080b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c0000081b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008140000413d000000000420004c000008290000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c000008400000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008390000413d000000000420004c0000084e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff00010430000000000100001900000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c000008670000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008600000413d000000000420004c000008750000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff00010430000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c0000088c0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008850000413d000000000420004c0000089a0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff0001043000000000030100190000004004000039000000000104043300000020051000390000000006030433000000000760004c000008ab0000613d000000000700001900000000085700190000002007700039000000000937001900000000090904330000000000980435000000000867004b000008a40000413d000000000356001900000000000304350000000005020433000000000650004c000008b80000613d000000000600001900000000073600190000002006600039000000000826001900000000080804330000000000870435000000000756004b000008b10000413d000000000235001900000000000204350000000002120049000000200320008a00000000003104350000001f02200039000000200300008a000000000332016f0000000002130019000000000332004b00000000030000190000000103004039000003e20520009c000008cb0000213d000000010330018f000000000330004c000008cb0000c13d0000000000240435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000000040020000390000000001020433000000410300008a000000000331004b000008e10000213d0000004003100039000003d00430009c000008e10000813d00000000003204350000002002100039000003f303000041000000000032043500000001020000390000000000210435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000000000020100190000004003000039000000000103043300000020041000390000000005020433000000000650004c000008f70000613d000000000600001900000000074600190000002006600039000000000826001900000000080804330000000000870435000000000756004b000008f00000413d0000000002450019000003f404000041000000000042043500000000021200490000001e0420008a00000000004104350000002102200039000000200400008a000000000442016f0000000002140019000000000442004b00000000040000190000000104004039000003e20520009c0000090b0000213d000000010440018f000000000440004c0000090b0000c13d0000000000230435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300001000000000002000100000007001d000000000a01001900000040070000390000000001070433000000200c100039000000000d0a0433000000000ed0004c000009230000613d000000000e000019000000000fce0019000000200ee00039000000000bae0019000000000b0b04330000000000bf0435000000000bde004b0000091c0000413d000000000acd001900000000000a0435000000000c020433000000000bc0004c000009300000613d000000000d000019000000000bad0019000000200dd00039000000000e2d0019000000000e0e04330000000000eb0435000000000bcd004b000009290000413d0000000002ac00190000000000020435000000000a030433000000000ba0004c0000093d0000613d000000000c000019000000000b2c0019000000200cc00039000000000d3c0019000000000d0d04330000000000db0435000000000bac004b000009360000413d00000000022a001900000000000204350000000003040433000000000a30004c0000094a0000613d000000000a000019000000000b2a0019000000200aa00039000000000c4a0019000000000c0c04330000000000cb0435000000000b3a004b000009430000413d000000000223001900000000000204350000000003050433000000000430004c000009570000613d0000000004000019000000000a2400190000002004400039000000000b540019000000000b0b04330000000000ba0435000000000a34004b000009500000413d000000000223001900000000000204350000000003060433000000000430004c000009640000613d000000000400001900000000052400190000002004400039000000000a640019000000000a0a04330000000000a50435000000000534004b0000095d0000413d0000000002230019000000000002043500000002030003670000000104000029000000000443034f0000001f0380018f0000000505800270000000000650004c000009760000613d0000000006000019000000050a600210000000000ba20019000000000aa4034f000000000a0a043b0000000000ab04350000000106600039000000000a56004b0000096e0000413d000000000630004c000009850000613d0000000505500210000000000454034f00000000055200190000000303300210000000000605043300000000063601cf000000000636022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000363019f0000000000350435000000000282001900000000000204350000000003090433000000000430004c000009920000613d000000000400001900000000052400190000002004400039000000000694001900000000060604330000000000650435000000000534004b0000098b0000413d000000000223001900000000000204350000000002120049000000200320008a00000000003104350000001f02200039000000200300008a000000000332016f0000000002130019000000000332004b00000000030000190000000103004039000003e20420009c000009a60000213d000000010330018f000000000330004c000009a60000c13d00000000002704350000000100000005000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300019000000000002000d00000001001d00000100021000390000000201000367000c000000010353000000000121034f000000000101043b0efd0ab40000040f0000000d02000029000000a0022000390000000c0300035f000000000223034f000000000202043b000b00000001001d00000000010200190efd0ab40000040f0000000d0200002900000060022000390000000c0300035f000000000223034f000000000202043b000a00000001001d00000000010200190efd0ab40000040f00000000020100190000000a010000290efd089c0000040f0000000d0200002900000040022000390000000c0300035f000000000223034f000000000202043b000003e002200197000a00000001001d00000000010200190efd0a9a0000040f0000000d0200002900000120022000390000000203000367000000000223034f000000000202043b000900000001001d00000000010200190efd0ab40000040f001800000000001d001900000000001d000800000001001d0000000d02000029000001c0032000390000000001000415000000190110008a00000020011000c9000c00000003001d0efd04270000040f0000001801000029000000010210008c00000a080000c13d001600000000001d001700000000001d0000000001000415000000170110008a00000020011000c90000000d020000290000000c030000290efd04270000040f0000001601000029000000000110004c00000a730000613d00000002050003670000001701500360000000000101043b000000010200008a000003c203000041000000000221004b00000000020000190000000002032019000003c201100197000003c20410009c0000000003008019000003c201100167000003c20110009c000000000102001900000000010360190000006004000039000000000110004c00000a0d0000c13d000700000005001d0efd08d20000040f0000000705000029000000000401001900000a0d0000013d0000000c020000290000000d020000290efd0aef0000040f000000020500036700000000040100190000000d020000290000014001200039000000000315034f0000006001000039000000000303043b000000000330004c000600000004001d00000a270000613d000003e9010000410000000000100439000003ea010000410000800b020000390000000003000415000000150330008a00000020033000c90efd0ecb0000040f000000ff01000039000000140110024f000000000110004c00000a7a0000613d000000150100035f000000000101043b0efd0ab40000040f0efd08e80000040f0000000d020000290000000604000029000700000001001d0000000001040433000500000001001d00000008010000290000000001010433000400000001001d00000009010000290000000001010433000300000001001d0000000a010000290000000001010433000200000001001d0000000b010000290000000001010433000100000001001d001200000000001d001300000000001d0000000001000415000000130110008a00000020011000c90000000c030000290efd04270000040f00000002010000290000000102000029000000000121001900000003020000290000000001210019000000040200002900000000012100190000000502000029000000000121001900000012011000290000000702000029000000000202043300000000012100190efd0b420000040f001000000000001d001100000000001d000500000001001d0000000001000415000000110110008a00000020011000c90000000d020000290000000c030000290efd04270000040f0000001107000029000000100800002900000005010000290000000b020000290000000a0300002900000009040000290000000805000029000000060600002900000007090000290efd09120000040f0000004002100210000003e602200041000003d20220019700000000010104330000006001100210000003de01100197000000000121019f000003d6011001c7000080100200003900000000030004150000000f0330008a00000020033000c90efd0ecb0000040f0000000f0100035f000000ff020000390000000e0220024f000000000220004c00000a7c0000613d000000000101043b0000001900000005000000000001042d000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff00010430000000000100001900000eff0001043000000060021002700000001f0220018f0000006503100270000003eb03300197000000000430004c00000a8a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000a830000413d000000000420004c00000a980000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003de0110019700000eff00010430000000000201001900000040030000390000000001030433000000410400008a000000000441004b00000aad0000213d0000004004100039000003d00540009c00000aad0000813d00000000004304350000002003100039000003f504000041000000000043043500000060022002100000002103100039000000000023043500000015020000390000000000210435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff0001043000020000000000020000007f0210008c000200000001001d00000ad10000a13d0efd0b7b0000040f000100000001001d00000002011000390efd047f0000040f0000000002010433000000000220004c00000ae10000613d00000020021000390000000003020433000003f6033001970000000105000029000000f804500210000000000334019f000003f30330004100000000003204350000000302500210000000f802200089000000020300002900000000032301cf000000ff0220008c000000000203001900000000020020190000002103100039000000000023043500000adf0000013d0efd045b0000040f0000000002010433000000000220004c00000ae80000613d0000000204000029000000f802400210000003c203000041000000000440004c000000000203601900000020031000390000000004030433000003f604400197000000000224019f00000000002304350000000200000005000000000001042d000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff00010430000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff000104300002000000000002000000010210008c00000b1c0000613d000000370210008c000200000001001d00000b0e0000a13d0efd0b7b0000040f000100000001001d00000002011000390efd047f0000040f0000000002010433000000000220004c00000b230000613d00000020021000390000000003020433000003f6033001970000000105000029000000f804500210000000000334019f000003f70330004100000000003204350000000302500210000000f802200089000000020300002900000000032301cf000000ff0220008c000000000203001900000000020020190000002103100039000000000023043500000b1a0000013d0efd045b0000040f0000000002010433000000000220004c00000b2a0000613d0000000202000029000000f80220021000000020031000390000000004030433000003f604400197000000000224019f000003c20220016700000000002304350000000200000005000000000001042d000003c5010000410000000000100435000000010100003900000004020000390000000000120435000003c60100004100000eff00010430000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff00010430000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff000104300efd045b0000040f0000000002010433000000000220004c00000b3b0000613d00000020021000390000000003020433000003f603300197000003f8033001c70000000000320435000000000001042d000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff000104300002000000000002000000370210008c000200000001001d00000b5f0000a13d0efd0b7b0000040f000100000001001d00000002011000390efd047f0000040f0000000002010433000000000220004c00000b6d0000613d00000020021000390000000003020433000003f6033001970000000105000029000000f804500210000000000334019f000003f90330004100000000003204350000000302500210000000f802200089000000020300002900000000032301cf000000ff0220008c000000000203001900000000020020190000002103100039000000000023043500000b6b0000013d0efd045b0000040f0000000002010433000000000220004c00000b740000613d0000000202000029000000f80220021000000020031000390000000004030433000003f604400197000000000242019f000003f80220004100000000002304350000000200000005000000000001042d000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff00010430000003c5010000410000000000100435000000320100003900000004020000390000000000120435000003c60100004100000eff000104300000008002100270000003fa0310009c000000000201a019000003fa0110009c0000000001000019000000100100203900000008031001bf000003e20420009c00000000010320190000004003200270000003e20420009c000000000203201900000004031001bf000003c10420009c00000000010320190000002003200270000003c10420009c000000000203201900000002031001bf0000ffff0420008c000000000103201900000010032002700000000002032019000000ff0220008c000000000200001900000001020020390000000001210019000000000001042d000000000801001900000040090000390000000001090433000000200a100039000000000b080433000000000cb0004c00000ba60000613d000000000c000019000000000dac0019000000200cc00039000000000e8c0019000000000e0e04330000000000ed0435000000000dbc004b00000b9f0000413d0000000008ab00190000000000080435000000000a020433000000000ba0004c00000bb30000613d000000000b000019000000000c8b0019000000200bb00039000000000d2b0019000000000d0d04330000000000dc0435000000000cab004b00000bac0000413d00000000028a001900000000000204350000000008030433000000000a80004c00000bc00000613d000000000a000019000000000b2a0019000000200aa00039000000000c3a0019000000000c0c04330000000000cb0435000000000b8a004b00000bb90000413d000000000228001900000000000204350000000003040433000000000830004c00000bcd0000613d0000000008000019000000000a2800190000002008800039000000000b480019000000000b0b04330000000000ba0435000000000a38004b00000bc60000413d000000000223001900000000000204350000000003050433000000000430004c00000bda0000613d000000000400001900000000082400190000002004400039000000000a540019000000000a0a04330000000000a80435000000000834004b00000bd30000413d000000000223001900000000000204350000000003060433000000000430004c00000be70000613d000000000400001900000000052400190000002004400039000000000864001900000000080804330000000000850435000000000534004b00000be00000413d000000000223001900000000000204350000000003070433000000000430004c00000bf40000613d000000000400001900000000052400190000002004400039000000000674001900000000060604330000000000650435000000000534004b00000bed0000413d000000000223001900000000000204350000000002120049000000200320008a00000000003104350000001f02200039000000200300008a000000000332016f0000000002130019000000000332004b00000000030000190000000103004039000003e20420009c00000c070000213d000000010330018f000000000330004c00000c070000c13d0000000000290435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300000000007010019000000400800003900000000010804330000002009100039000003d60a0000410000000000a904350000002109100039000000000a070433000000000ba0004c00000c200000613d000000000b000019000000000c9b0019000000200bb00039000000000d7b0019000000000d0d04330000000000dc0435000000000cab004b00000c190000413d00000000079a001900000000000704350000000009020433000000000a90004c00000c2d0000613d000000000a000019000000000b7a0019000000200aa00039000000000c2a0019000000000c0c04330000000000cb0435000000000b9a004b00000c260000413d000000000279001900000000000204350000000007030433000000000970004c00000c3a0000613d0000000009000019000000000a2900190000002009900039000000000b390019000000000b0b04330000000000ba0435000000000a79004b00000c330000413d000000000227001900000000000204350000000203000367000000000443034f0000001f0350018f0000000507500270000000000970004c00000c4b0000613d0000000009000019000000050a900210000000000ba20019000000000aa4034f000000000a0a043b0000000000ab04350000000109900039000000000a79004b00000c430000413d000000000930004c00000c5a0000613d0000000507700210000000000474034f00000000077200190000000303300210000000000907043300000000093901cf000000000939022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000393019f0000000000370435000000000252001900000000000204350000000003060433000000000430004c00000c670000613d000000000400001900000000052400190000002004400039000000000764001900000000070704330000000000750435000000000534004b00000c600000413d000000000223001900000000000204350000000002120049000000200320008a00000000003104350000001f02200039000000200300008a000000000332016f0000000002130019000000000332004b00000000030000190000000103004039000003e20420009c00000c7a0000213d000000010330018f000000000330004c00000c7a0000c13d0000000000280435000000000001042d000003c5010000410000000000100435000000410100003900000004020000390000000000120435000003c60100004100000eff000104300010000000000002000000000401001900000040014000390000000202000367000000000112034f0000012003400039000000000232034f000000000202043b000300000002001d000000000101043b000400000001001d000f00000000001d001000000000001d000001c0034000390000000001000415000000100110008a00000020011000c9000200000004001d0000000002040019000100000003001d0efd04270000040f00000010010000290000000f0200002900000000030000310efd05fc0000040f00000000030004140000000402000029000003e004200197000080060240008c00000cca0000613d000000040240008c00000cc80000613d000000c002300210000003d50220019700000000030104330000006003300210000003de063001970000004001100210000003e601100041000003d2011001970000000303000029000000000530004c00000cb60000613d000000000121019f000000000161019f000003d6011001c7000080090200003900000000050004150000000c0550008a00000020055000c9000400000005001d0efd0ee40000040f00000cbe0000013d000000000112019f000000000161019f00000000030004150000000e0330008a00000020033000c90000000002040019000400000003001d0efd0eb20000040f000000ff010000390000000402000029000000200220011a000000010112025f000000000202036700030000000203550000006002200270000103c10020019d000000000110004c00000d430000613d0000001000000005000000000001042d000900000000001d000a00000000001d00000000010004150000000a0110008a00000020011000c90000000202000029000400000003001d00000001030000290efd04270000040f0000000a01000029000000090200002900000000030000310efd05fc0000040f0000000402000029000000c402200210000003fb022001970000004003100210000003e603300041000000000232019f00000000010104330000006001100210000003e701100197000000000112019f000003e8011001c70000000302000029000003fa02200197000000000320004c00000cef0000c13d00008006020000390000000005000415000000060550008a00000020055000c900000000030000190000000004000019000400000005001d0efd0ee40000040f00000cf70000013d000003fc032001c7000080090200003900008006040000390000000005000415000000080550008a00000020055000c9000400000005001d0efd0ee40000040f000000ff010000390000000402000029000000200220011a000000010312025f000000000702036700030000000703550000006002700270000103c10020019d000003c101200197000000000230004c00000d260000613d000400000001001d0efd047f0000040f00000004030000290000001f0230018f00000000003104350000000004030019000000200110003900000003030003670000000504400270000000000540004c00000d160000613d000000000500001900000005065002100000000007610019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b00000d0e0000413d000000000520004c00000cc80000613d0000000504400210000000000343034f00000000014100190000000302200210000000000401043300000000042401cf000000000424022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000242019f000000000021043500000cc80000013d0000001f0310018f00000000080100190000000502100270000000000420004c00000d330000613d00000000040000190000000505400210000000000657034f000000000606043b00000000006504350000000104400039000000000524004b00000d2c0000413d000000000430004c00000d410000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000127034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600180021000000eff00010430000000000100001900000eff000104300000004002100039000003fd030000410000000000320435000000200210003900000011030000390000000000320435000000200200003900000000002104350000006001100039000000000001042d0005000000000002000100000001001d000000410130008c00000d7e0000c13d00000000030000310000004104000039000000000102001900000000020400190efd05fc0000040f000400000000001d000500000000001d00000000030100190000000001000415000000050110008a00000020011000c900000001020000290efd0e020000040f0000000501000029000100000001001d00000004010000290efd0dc10000040f0000040001000041000000000010043900000000010004120000000402000039000000000012043900000024010000390000000000010439000004010100004100008005020000390000000003000415000000030330008a00000020033000c90efd0ecb0000040f000000ff01000039000000020110024f000000010110008c00000d8f0000c13d000000030100035f000000000101043b0000000102000029000000000121013f000003e001100197000000000110004c00000d910000c13d0000000500000005000000000001042d000000400100003900000000010104330000004402100039000003fe03000041000000000032043500000024021000390000001a030000390000000000320435000003d90200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003d201100197000003ff011001c700000eff00010430000000000100001900000eff0001043000000040010000390000000002010433000100000002001d000003d901000041000000000012043500000004012000390efd0d450000040f000000010200002900000000012100490000006001100210000003de011001970000004002200210000003d202200197000000000121019f00000eff00010430000000600210003900000402030000410000000000320435000000400210003900000403030000410000000000320435000000200210003900000022030000390000000000320435000000200200003900000000002104350000008001100039000000000001042d00000040021000390000040403000041000000000032043500000020021000390000001f030000390000000000320435000000200200003900000000002104350000006001100039000000000001042d000000400210003900000405030000410000000000320435000000200210003900000018030000390000000000320435000000200200003900000000002104350000006001100039000000000001042d0001000000000002000000050210008c00000dce0000813d000000000210004c00000dcc0000613d000000010210008c00000dd50000613d000000020210008c00000de40000613d000000030110008c00000df30000613d0000000100000005000000000001042d000003c5010000410000000000100435000000210100003900000004020000390000000000120435000003c60100004100000eff0001043000000040010000390000000002010433000100000002001d000003d901000041000000000012043500000004012000390efd0db70000040f000000010200002900000000012100490000006001100210000003de011001970000004002200210000003d202200197000000000121019f00000eff0001043000000040010000390000000002010433000100000002001d000003d901000041000000000012043500000004012000390efd0dad0000040f000000010200002900000000012100490000006001100210000003de011001970000004002200210000003d202200197000000000121019f00000eff0001043000000040010000390000000002010433000100000002001d000003d901000041000000000012043500000004012000390efd0da00000040f000000010200002900000000012100490000006001100210000003de011001970000004002200210000003d202200197000000000121019f00000eff00010430000300000000000200000002050000390000000004030433000000410440008c000000000400001900000e0d0000613d000000200210011a000100000205001f000000000204001f0000000300000005000000000001042d0000004004300039000100000001001d00000000050404330000002001300039000000000401043300000060013000390000000001010433000200000000001d000300000000001d000000f8031002700000000001000415000000030110008a00000020011000c90efd0e460000040f00000001010000290000000205000029000000030400002900000e080000013d000000030200036700000001040000310000001f0340018f000000400100003900000000010104330000000504400270000000000540004c00000e300000613d000000000500001900000005065002100000000007610019000000000662034f000000000606043b00000000006704350000000105500039000000000645004b00000e280000413d000000000530004c00000e3f0000613d0000000504400210000000000242034f00000000044100190000000303300210000000000504043300000000053501cf000000000535022f000000000202043b0000010003300089000000000232022f00000000023201cf000000000252019f00000000002404350000004001100210000003d201100197000000600200003900000001022001ff000003de02200197000000000112019f00000eff0001043000030000000000020000000307000039000004060650009c000000000600001900000e800000813d000100000001001d000000400100003900000000010104330000006006100039000000000056043500000040051000390000000000450435000000ff0330018f00000020041000390000000000340435000000000021043500000000000004350000004001100210000003d2011001970000000002000414000000c002200210000003d502200197000000000121019f00000407011001c700000001020000390000000003000415000000030330008a00000020033000c90efd0ecb0000040f000000ff01000039000000020110024f000000030200035f00000000030000190000000504300210000000000542034f000000000505043b00000000005404350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c000000000304001900000e670000c13d00030000000203550000006002200270000103c10020019d000000000110004c00000e850000613d0000000001000433000003e002100197000000000220004c00000000060100190000000006006019000000000700001900000001070060390000000101000029000000200210011a000100000207001f000000000206001f0000000300000005000000000001042d0efd0e1f0000040f000000000110004c00000e890000613d000000000001042d0000004001000039000000000101043300000064021000390000040803000041000000000032043500000044021000390000040903000041000000000032043500000024021000390000003a030000390000000000320435000003d90200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003d201100197000003da011001c700000eff0001043000000040021000390000040a03000041000000000032043500000020021000390000001a030000390000000000320435000000200200003900000000002104350000006001100039000000000001042d0000000001000411000080010110008c00000eab0000613d000000000001042d000003c5010000410000000000100435000000010100003900000004020000390000000000120435000003c60100004100000eff000104300002000000000002000200000003001d0000002003300039000100000003001d00000ec1002104210000000203000029000000200230011a0000000002010355000003c2010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000040b010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000003001d0000002003300039000100000003001d00000eda002104230000000203000029000000200230011a0000000002010355000003c2010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000040b010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000005001d0000002005500039000100000005001d00000ef3002104210000000203000029000000200230011a0000000002010355000003c2010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000040b010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d00000efd0000043200000efe0001042e00000eff00010430000000000000000100000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff8000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000002000000000000000000000000000000800000010000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000010051ec300000000000000000000000000000000000000000000000000000000707747a000000000000000000000000000000000000000000000000000000000707747a10000000000000000000000000000000000000000000000000000000075e394db000000000000000000000000000000000000000000000000000000009d8c9908000000000000000000000000000000000000000000000000000000001626ba7e00000000000000000000000000000000000000000000000000000000210135a30000000000000000000000000000000000000000000000010000000000000000e1239cd8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000001626ba7e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007261746f720000000000000000000000000000000000000000000000000000004661696c656420746f20706179207468652066656520746f20746865206f706508c379a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000949431dc000000000000000000000000000000000000000000000000000000008c5a34450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000dd62ed3e00000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff095ea7b30000000000000000000000000000000000000000000000000000000074686f64000000000000000000000000000000000000000000000000000000004f6e6c7920626f6f746c6f616465722063616e2063616c6c2074686973206d6500000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000ffffff00000000000000000000000001000000000000000000000000000000000000000000000000000000000000009a8a0592ac89c5ad3bc6df8224c17b485976f597df104ee20d0df415241f670b020002000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff807c2e451d225420a18aeef6a82cbe63445d21905cbdd92ac8638cd29dc0fbea080000000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6ead7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a519b453ce45aaaaf3a300f5a9ec95869b4f28ab10430b572ee218c3a6a5e07d6f190100000000000000000000000000000000000000000000000000000000000081000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff0000000ffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000696e76616c6964207369676e6174757265000000000000000000000000000000696e636f7272656374207369676e6174757265206c656e6774680000000000000000000000000000000000000000000000000064000000000000000000000000310ab089e4439a4c15d089f94afb7896ff553aecb10793d0ab882de59d99a32e0200020000000000000000000000000000000044000000000000000000000000756500000000000000000000000000000000000000000000000000000000000045434453413a20696e76616c6964207369676e6174757265202773272076616c45434453413a20696e76616c6964207369676e6174757265206c656e6774680045434453413a20696e76616c6964207369676e617475726500000000000000007fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1000000000000000000000000000000000000008000000000000000000000000074206265206174206c656173742034206279746573206c6f6e67000000000000546865207374616e64617264207061796d617374657220696e707574206d7573556e737570706f72746564207061796d617374657220666c6f770000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0100040dfa0bea28e18f6b99a3780e14bab64ec9072731a8e11ec1e716ae6e0e"}},"contracts/Paymaster.sol":{"SPaymaster":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint64","name":"_maxNonce","type":"uint64"},{"internalType":"bool","name":"_useCustomToken","type":"bool"},{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint192","name":"_amount","type":"uint192"},{"internalType":"address","name":"_validationAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC20_PRICE_FOR_PAYING_FEES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"addressToSatisfy","type":"address"}],"name":"satisfiedTokenrequirements","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"updateERC20Fee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"01000225d9afe176647b700250726df2d2fd505e3be18d667496b3baa122bdab"}},"contracts/factory/AccountFactory.sol":{"SAccountFactory":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BytecodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"deployAccount","outputs":[{"internalType":"address","name":"accountAddress","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"010000a9011ce9577359aa919d1780942965da3d6d714eb5f6367a60c113e6d4"}},"contracts/factory/PaymasterFactory.sol":{"SPaymasterFactory":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BytecodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes","name":"metadata","type":"bytes"},{"internalType":"uint64","name":"maxNonce","type":"uint64"},{"internalType":"bool","name":"useCustomToken","type":"bool"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint192","name":"amount","type":"uint192"},{"internalType":"address","name":"validationAddress","type":"address"}],"name":"deployPaymaster","outputs":[{"internalType":"address","name":"accountAddress","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{"010001539d7f3bd84080c2033c4481ee6a4a88968936b5e413fdcfa002f0f425":"contracts/factory/PaymasterFactoryStorage.sol:SPaymasterStorage"},"hash":"01000121872f3ee4d96d0f484fb09f38fda652663e2bc77f679fc72ddb2fe26d"}},"contracts/factory/PaymasterFactoryStorage.sol":{"SPaymasterStorage":{"abi":[{"inputs":[],"name":"getAllPaymasters","outputs":[{"components":[{"internalType":"address","name":"contract_address","type":"address"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"internalType":"struct SPaymasterStorage.PaymasterMeta[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"getPaymasterByOwner","outputs":[{"components":[{"internalType":"address","name":"contract_address","type":"address"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"internalType":"struct SPaymasterStorage.PaymasterMeta","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"paymasterAddr","type":"address"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"storePaymaster","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"000300000000000200020000000103550000006003100270000001350030019d0000013503300197000000000131034f0000006001100270000101350010019d000000010120018f000000000110004c0000000c0000c13d04cd001c0000040f04cd000d0000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c0000001a0000c13d000000200100003900000100020000390000000000120439000001200100003900000000000104390000013601000041000004ce0001042e0000000001000019000004cf00010430001a0000000000020000000001000410000080020210008c000000370000613d0000000002000411000080010220008c000000370000613d00000137020000410000000000200439000000040200003900000000001204390000013801000041000080020200003900000000030004150000001a0330008a00000020033000c904cd04b00000040f000000ff01000039000000190110024f000000000110004c0000005b0000613d0000001a0100035f000000000101043b000000000110004c000000370000c13d0000000001000019000004ce0001042e0000008005000039000000400900003900000000005904350000000002000031000000030120008c000000590000a13d001800000000001d0000000201000367000000000301043b000000e003300270000001390430009c0000005d0000613d0000013a0430009c000000710000613d0000013b0330009c000000590000c13d0000000003000416000000000330004c000000830000c13d000000040220008a0000013c030000410000001f0420008c000000000400001900000000040320190000013c02200197000000000520004c00000000030080190000013c0220009c00000000020400190000000002036019000000000220004c000000890000c13d0000000001000019000004cf000104300000000001000019000004cf000104300000000001000019000004cf000104300000000001000416000000000110004c000000850000c13d000000040120008a000000010200008a0000013c03000041000000000221004b000000000200001900000000020320190000013c011001970000013c0410009c00000000030080190000013c011001670000013c0110009c00000000010200190000000001036019000000000110004c0000008f0000c13d0000000001000019000004cf000104300000000003000416000000000330004c000000870000c13d000000040320008a0000013c040000410000005f0530008c000000000500001900000000050420190000013c03300197000000000630004c00000000040080190000013c0330009c00000000030500190000000003046019000000000330004c0000009e0000c13d0000000001000019000004cf000104300000000001000019000004cf000104300000000001000019000004cf000104300000000001000019000004cf000104300000000401100370000000000101043b0000013d0210009c000000a40000413d0000000001000019000004cf00010430000600000005001d000700000009001d0000000101000039000b00000001001d04cd04cb0000040f00000000030100190000013e0130009c000000dd0000413d000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf000104300000000403100370000000000803043b0000013d0380009c000000ea0000413d0000000001000019000004cf000104300000000002090433000000410300008a000000000332004b000000f10000213d00000040032000390000013e0430009c000000f10000813d00000000003904350000002003200039000000600400003900000000004304350000000000020435000000180200002900000000001204350000002001000039000b00000001001d000000000021043500000040012002100000013f0110019700000140011001c7000080100200003900000000030004150000000f0330008a00000020033000c9000700000009001d04cd04b00000040f0000000f0100035f000000ff020000390000000e0220024f000000010220008c000001480000c13d000000000101043b04cd04cb0000040f000c00000000001d000d00000000001d000000000201001900000000010004150000000d0110008a00000020011000c904cd03f70000040f0000000d0100002904cd04100000040f00000007020000290000000003020433000a00000003001d0000000b020000290000000000230435000000200230003904cd03da0000040f0000000a0200002900000000012100490000006001100210000001420110019700000040022002100000013f02200197000000000121019f000004ce0001042e0000000501300210000000bf01100039000000200200008a000000000121016f0000013e0210009c000000f80000413d000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf000104300000002403100370000000000303043b000001450a3001970000013d0330009c000001420000413d0000000001000019000004cf00010430000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf0001043000000007020000290000000000120435000000060100002900000000003104350000000b010000290000000000100435000000000130004c000001130000613d0000014b02000041000000a0040000390000000005000019000800000003001d000900000005001d000a00000004001d000b00000002001d000000000102001904cd04100000040f00000009050000290000000a040000290000000b0200002900000008030000290000000000140435000000020220003900000020044000390000000105500039000000000135004b000001040000413d00000007010000290000000002010433000000200100003900000000001204350000000601000029000000000401043300000020012000390000000000410435000600000002001d0000004005200039000000050140021000000000021500190000001806000029000000000146004b0000013a0000813d000000400100008a00000006030000290000000001310049000700000001001d000000a003000039000800000004001d000900000003001d000a00000006001d000b00000005001d000000070100002900000000012100190000000000150435000000000103043304cd03da0000040f00000009030000290000000a060000290000000b0500002900000008040000290000002005500039000000200330003900000000020100190000000106600039000000000146004b000001280000413d000000060300002900000000013200490000006001100210000001420110019700000040023002100000013f02200197000000000121019f000004ce0001042e0000004403100370000000000303043b0000013e0430009c000001660000413d0000000001000019000004cf0001043000000060021002700000001f0220018f00000065031002700000014103300197000000000430004c000001560000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000014f0000413d000000000420004c000001640000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000014201100197000004cf0001043000000023043000390000013c05000041000000000624004b000000000600001900000000060540190000013c022001970000013c04400197000000000724004b000000000500a019000000000224013f0000013c0220009c00000000020600190000000002056019000000000220004c000001810000613d0000000402300039000000000121034f000000000101043b0000013e0210009c000001830000413d000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf000104300000000001000019000004cf000104300000003f02100039000000200600008a000000000262016f00000000070904330000000002270019000000000472004b00000000040000190000000104004039000001460520009c0000019b0000213d000000010440018f000000000440004c0000019b0000c13d00000000002904350000000000170435000000240230003900000000031200190000000004000031000000000343004b000001a20000a13d0000013501000041000000180110017f0000014a211000d1000004cf00010430000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf00010430000a00000008001d000500000006001d0000000203000367000000000423034f0000001f0310018f000800000007001d00000020027000390000000505100270000000000650004c000001b50000613d000000000600001900000005076002100000000008720019000000000774034f000000000707043b00000000007804350000000106600039000000000756004b000001ad0000413d000000000630004c000001c40000613d0000000505500210000000000454034f00000000055200190000000303300210000000000605043300000000063601cf000000000636022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000363019f000000000035043500000000011200190000001802000029000b00000002001d0000000000210435000700000009001d00000000060904330000014701000041000000000016043500000004016000390000014802000041000000000021043500000000010004140000000402a0008c00090000000a001d000001d50000c13d0000000104000031000001f80000013d000000c001100210000001490110019700000040026002100000013f02200197000000000112019f00000144011001c70000000003000415000000170330008a00000020033000c900000000020a0019000600000006001d04cd04b00000040f0000000606000029000000ff01000039000000160210024f000000170100035f000000000300001900000005043002100000000005460019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000001e60000c13d0000006003100270000101350030019d0000013504300197000000000220004c000002200000613d000000200140008c000000200200003900000000020440190000001f01200039000000600310018f00000000070600190000000001630019000000000331004b00000000030000190000000103004039000001460410009c000002190000213d000000010330018f000000000330004c000002190000c13d000000070300002900000000001304350000013c03000041000000200420008c000000000400001900000000040340190000013c02200197000000000520004c000000000300a0190000013c0220009c00000000020400190000000002036019000000000220004c000002470000613d0000000b0100002900000135011001970000014a211000d1000004cf00010430000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf000104300000000b02000029000000000321034f0000001f0240018f000000070100002900000000010104330000000504400270000000000540004c000002310000613d000000000500001900000005065002100000000007610019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000002290000413d000000000520004c000002400000613d0000000504400210000000000343034f00000000044100190000000302200210000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f000000000024043500000040011002100000013f01100197000000600200003900000001022001ff0000014202200197000000000112019f000004cf000104300000000002070433000000000320004c0000000003000019000000010300c039000000000332004b0000025e0000c13d000000000220004c000002620000c13d00000044021000390000014f03000041000000000032043500000024021000390000001e0300003900000000003204350000015002000041000000000021043500000004021000390000002003000039000000000032043500000040011002100000013f0110019700000151011001c7000004cf000104300000000b0100002900000135011001970000014a211000d1000004cf00010430000000010100003904cd04cb0000040f0000000a020000290000000b03000029000000000023043500000018020000290000002003000039000a00000003001d0000000000230435000b00000001001d00000040012002100000013f0110019700000140011001c700008010020000390000000003000415000000150330008a00000020033000c904cd04b00000040f000000150100035f000000ff02000039000400000002001d000000140220024f000000010220008c0000029d0000c13d000000000201043b0000000b0100002904cd04c90000040f00000007010000290000000002010433000000410100008a000600000002001d000000000112004b000002bb0000213d000000060100002900000040011000390000013e0210009c000002bb0000813d0000000702000029000000000012043500000009010000290000000602000029000000000012043500000020022000390000000801000029000900000002001d00000000001204350000000b01000029000001460110009c000002c20000a13d00000018010000290000014302000041000000000021043500000041020000390000000403000039000000000023043500000040011002100000013f0110019700000144011001c7000004cf0001043000000060021002700000001f0220018f00000065031002700000014103300197000000000430004c000002ab0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000002a40000413d000000000420004c000002b90000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000014201100197000004cf00010430000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf000104300000000b0100002900000001011000390000000102000039000300000002001d04cd04c90000040f000000030100002904cd04cb0000040f0000000b02000029000000000121004b000002ef0000a13d000000030100002900000000001004350000000b010000290000000101100210000b00000001001d0000014b01100041000800000001001d04cd04cb0000040f0000014c01100197000000060200002900000000020204330000014502200197000000000112019f000000080200002904cd04c90000040f0000000b010000290000014d01100041000200000001001d00000009010000290000000001010433000600000001001d0000000001010433000100000001001d0000013e0110009c000002f60000413d00000018010000290000014302000041000000000021043500000041020000390000000403000039000000000023043500000040011002100000013f0110019700000144011001c7000004cf00010430000001430100004100000000001004350000003201000039000000040200003900000000001204350000014401000041000004cf00010430000000020100002904cd04cb0000040f000000010210018f00000001011002700000007f0310018f000000000420004c0000000001036019000b00000001001d0000001f0110008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b0000030f0000613d000001430100004100000000001004350000002201000039000000040200003900000000001204350000014401000041000004cf000104300000001801000029000800000001001d0000000b01000029000000200110008c0000033c0000413d00000002010000290000000802000029000000000012043500000040012002100000013f011001970000014e011001c700008010020000390000000003000415000000130330008a00000020033000c904cd04b00000040f000000130100035f0000000402000029000000120220024f000000000220004c0000039e0000613d00000001030000290000001f023000390000000502200270000000200330008c0000000002004019000000000101043b0000000b030000290000001f03300039000000050330027000000000033100190000000002210019000900000003001d000000000132004b00000008010000290000033c0000813d000b00000002001d00000008010000290000000b0200002904cd04c90000040f0000000b0200002900000001022000390000000901000029000000000112004b000003330000413d000000080100002900000001010000290000001f0110008c000003810000a13d000000020100002900000008020000290000000000120435000000070100002900000018011001ef0000013f011001970000014e011001c700008010020000390000000003000415000000110330008a00000020033000c904cd04b00000040f000000110100035f0000000402000029000000100220024f000000010220008c000003bc0000c13d00000005020000290000000103000029000000000223016f000000000401043b0000001801000029000800000001001d000500000002001d000000000121004b0000000a030000290000000601000029000003700000813d00000020030000390000000801000029000900000001001d000b00000004001d000a00000003001d0000000601000029000000000113001900000000010104330000000b0200002904cd04c90000040f0000000b040000290000000a0300002900000020033000390000000104400039000000090200002900000020022000390000000501000029000900000002001d000000000112004b0000035f0000413d00000001010000290000000502000029000000000112004b0000038f0000813d00000001010000290000000301100210000000f80110018f000000010200008a000000000112022f000000000121013f000000060200002900000000022300190000000002020433000000000112016f000000000204001904cd04c90000040f0000038f0000013d0000000101000029000000000110004c0000000801000029000003880000613d00000006010000290000002001100039000000000101043300000001020000290000000302200210000000010300008a000000000223022f000000000232013f000000000121016f000300000001001d000000010100002900000001011002100000000302000029000000000121019f000000020200002904cd04c90000040f0000000801000029000000600110021000000142011001970000000702000029000000000202043300000040022002100000013f02200197000000000121019f000004ce0001042e00000060021002700000001f0220018f00000065031002700000014103300197000000000430004c000003ac0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003a50000413d000000000420004c000003ba0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000014201100197000004cf0001043000000060021002700000001f0220018f00000065031002700000014103300197000000000430004c000003ca0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003c30000413d000000000420004c000003d80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000014201100197000004cf00010430000000000301043300000145033001970000000000320435000000200110003900000000010104330000002003200039000000400400003900000000004304350000004004200039000000000301043300000000003404350000006002200039000000000430004c000003f00000613d000000000400001900000000054200190000002004400039000000000614001900000000060604330000000000650435000000000534004b000003e90000413d000000000132001900000000000104350000001f01300039000000200300008a000000000131016f0000000001120019000000000001042d0003000000000002000300000002001d000200000001001d0000000101000039000100000001001d04cd04cb0000040f0000000302000029000000000121004b000004090000a13d0000000101000029000000000010043500000001032002100000000201000029000000200210011a0000014b02300047000100000200001f0000000300000005000000000001042d000001430100004100000000001004350000003201000039000000040200003900000000001204350000014401000041000004cf00010430000900000000000200000040040000390000000003040433000000410200008a000000000223004b0000047d0000213d00000040053000390000013e0250009c0000047d0000813d0000000000540435000200000003001d000100000004001d000700000001001d04cd04cb0000040f00000145011001970000000202000029000000000012043500000001010000290000000001010433000300000001001d00000007010000290000000101100039000700000001001d04cd04cb0000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000503001900000000050460190000001f0350008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b000004840000c13d00000003030000290000000000530435000000000220004c000004620000613d000500000005001d000000070100002900000000001004350000014e0100004100008010020000390000000003000415000000090330008a00000020033000c904cd04b00000040f000000090100035f000000ff02000039000000080220024f000000010220008c000004920000c13d0000000502000029000000000220004c0000000003000019000004690000613d00000003020000290000002002200039000400000002001d000000000201043b0000000003000019000600000002001d000700000003001d000000000102001904cd04cb0000040f00000007030000290000000402000029000000000232001900000000001204350000000602000029000000010220003900000020033000390000000501000029000000000113004b000004530000413d000004690000013d000001000200008a000000000121016f00000020023000390000000000120435000000000150004c000000200300003900000000030060190000003f01300039000000200200008a000000000221016f00000003040000290000000001420019000000000221004b00000000020000190000000102004039000001460310009c0000048b0000213d000000010220018f000000000220004c0000048b0000c13d000000010200002900000000001204350000000201000029000000200210003900000000004204350000000900000005000000000001042d000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf00010430000001430100004100000000001004350000002201000039000000040200003900000000001204350000014401000041000004cf00010430000001430100004100000000001004350000004101000039000000040200003900000000001204350000014401000041000004cf0001043000000060021002700000001f0220018f00000065031002700000014103300197000000000430004c000004a00000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000004990000413d000000000420004c000004ae0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000014201100197000004cf000104300002000000000002000200000003001d0000002003300039000100000003001d000004bf002104230000000203000029000000200230011a00000000020103550000013c010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000152010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d000004cd00000432000004ce0001042e000004cf00010430000000000000000100000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff00000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000021f8e42700000000000000000000000000000000000000000000000000000000800de7c400000000000000000000000000000000000000000000000000000000e84f666d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000ffffffff0000000000000000020000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff00000000000000000000000000000000ffffffff0000000000000000000000004e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff01ffc9a700000000000000000000000000000000000000000000000000000000ba4a18c00000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000000000000b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6ffffffffffffffffffffffff0000000000000000000000000000000000000000b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf702000000000000000000000000000000000000200000000000000000000000006e6f7420612076616c6964207061796d617374657220636f6e7472616374000008c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}},"factoryDependencies":{},"hash":"010001539d7f3bd84080c2033c4481ee6a4a88968936b5e413fdcfa002f0f425"}},"contracts/interface/IAccount.sol":{"IAccount":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"executeTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"executeTransactionFromOutside","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"payForTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_possibleSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"prePaymaster","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateTransaction","outputs":[],"stateMutability":"payable","type":"function"}]}},"contracts/interface/IAccountFactory.sol":{"ISAccountFactory":{"abi":[{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"deployAccount","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"contracts/interface/IPaymaster.sol":{"ISPaymaster":{"abi":[{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"addressToSatisfy","type":"address"}],"name":"satisfiedTokenrequirements","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"}]}},"contracts/interface/IPaymasterFactory.sol":{"ISPaymasterFactory":{"abi":[{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes","name":"metadata","type":"bytes"},{"internalType":"uint64","name":"maxNonce","type":"uint64"},{"internalType":"bool","name":"useCustomToken","type":"bool"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint192","name":"amount","type":"uint192"},{"internalType":"address","name":"validationAddress","type":"address"}],"name":"deployPaymaster","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"contracts/interface/IPaymasterFactoryStorage.sol":{"ISPaymasterStorage":{"abi":[{"inputs":[],"name":"getAllPaymasters","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymasterByOwner","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"paymasterAddr","type":"address"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"storePaymaster","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"contracts/tokens/ERC20.sol":{"MyERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"000200000000000200010000000103550000006001100270000002640010019d000000010120018f000000000110004c000000080000c13d098a02270000040f098a00090000040f00110000000000020000008001000039000000400200003900000000001204350000000001000416000000000110004c000002180000c13d00000000010000310000001f03100039000000200400008a000300000004001d000000000443016f00000000080204330000000003840019000000000443004b00000000040000190000000104004039000002650530009c0000021a0000213d000000010440018f000000000440004c0000021a0000c13d00000000003204350000001f0210018f00000001030003670000000504100270000000000540004c0000002e0000613d000000000500001900000005065002100000000007680019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000000260000413d000000000520004c0000003d0000613d0000000504400210000000000343034f00000000044800190000000302200210000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f000000000024043500000266020000410000005f0310008c000000000300001900000000030220190000026604100197000000000540004c0000000002008019000002660440009c000000000203c019000000000220004c000002210000613d0000000004080433000002670340009c000002230000813d00000000021800190000000001840019000800000002001d000900000008001d098a07640000040f0000000903000029000600000001001d00000020013000390000000001010433000002670210009c000002250000813d00000000013100190000000802000029098a07640000040f000000090200002900000040022000390000000002020433000001000320008c000000600000413d00000000010000190000098c0001043000000006030000290000000004030433000002670340009c0000006b0000413d0000026c0100004100000000001004350000004101000039000000040200003900000000001204350000026d010000410000098c00010430000200000004001d000400000001001d000100000002001d0000000301000039000700000001001d098a09880000040f000000010210018f00000001011002700000007f0310018f000000000420004c000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b000000870000613d0000026c0100004100000000001004350000002201000039000000040200003900000000001204350000026d010000410000098c00010430000000200130008c000000ae0000413d000900000003001d00000007010000290000000000100435000002680100004100008010020000390000000003000415000000110330008a00000020033000c9098a096d0000040f000000110100035f000000ff02000039000000100220024f000000000220004c0000011d0000613d00000002030000290000001f023000390000000502200270000000200330008c0000000002004019000000000101043b00000009030000290000001f03300039000000050330027000000000033100190000000002210019000000000132004b000000ae0000813d000800000003001d000900000002001d00000000010000190000000902000029098a09860000040f000000090200002900000008030000290000000102200039000000000132004b000000a50000413d00000002040000290000001f0140008c000000e90000a13d000000070100002900000000001004350000026801000041000080100200003900000000030004150000000f0330008a00000020033000c9098a096d0000040f0000000f0100035f000000ff020000390000000e0220024f000000010220008c0000013b0000c13d00000003020000290000000203000029000000000623016f0000002005000039000000000201043b000000000160004c0000000603000029000000d90000613d00000020050000390000000004000019000500000006001d000700000004001d000800000005001d000900000002001d00000000013500190000000001010433098a09860000040f00000007040000290000000506000029000000080500002900000009020000290000000603000029000000200550003900000001022000390000002004400039000000000164004b000000c90000413d0000000204000029000000000146004b000000e60000813d0000000301400210000000f80110018f000000010400008a000000000114022f000000000141013f00000000033500190000000003030433000000000113016f098a09860000040f000000020400002900000001010000390000000102400210000000f50000013d000000000140004c0000000001000019000000ef0000613d0000000601000029000000200110003900000000010104330000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000000000112019f0000000302000039098a09860000040f00000004010000290000000002010433000002650120009c000001030000a13d0000026c0100004100000000001004350000004101000039000000040200003900000000001204350000026d010000410000098c00010430000500000002001d0000000401000039000700000001001d098a09880000040f000000010210018f00000001011002700000007f0310018f000000000420004c000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b000001590000613d0000026c0100004100000000001004350000002201000039000000070200002900000000001204350000026d010000410000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000012b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000001240000413d000000000420004c000001390000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000001490000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000001420000413d000000000420004c000001570000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300000000701000029000000200130008c000001810000413d000900000003001d000000070100002900000000001004350000026801000041000080100200003900000000030004150000000d0330008a00000020033000c9098a096d0000040f0000000d0100035f000000ff020000390000000c0220024f000000000220004c000001dc0000613d00000005030000290000001f023000390000000502200270000000200330008c0000000002004019000000000101043b00000009030000290000001f03300039000000050330027000000000033100190000000002210019000000000132004b000001810000813d000800000003001d000900000002001d00000000010000190000000902000029098a09860000040f000000090200002900000008030000290000000102200039000000000132004b000001780000413d00000005040000290000001f0140008c000001bc0000a13d000000070100002900000000001004350000026801000041000080100200003900000000030004150000000b0330008a00000020033000c9098a096d0000040f0000000b0100035f000000ff020000390000000a0220024f000000010220008c000001fa0000c13d00000003020000290000000503000029000000000623016f0000002005000039000000000201043b000000000160004c0000000403000029000001ac0000613d00000020050000390000000004000019000600000006001d000700000004001d000800000005001d000900000002001d00000000013500190000000001010433098a09860000040f00000007040000290000000606000029000000080500002900000009020000290000000403000029000000200550003900000001022000390000002004400039000000000164004b0000019c0000413d0000000504000029000000000146004b000001b90000813d0000000301400210000000f80110018f000000010400008a000000000114022f000000000141013f00000000033500190000000003030433000000000113016f098a09860000040f000000050400002900000001010000390000000102400210000001c80000013d000000000140004c0000000001000019000001c20000613d0000000401000029000000200110003900000000010104330000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000000000112019f0000000402000039098a09860000040f0000000501000039000900000001001d098a09880000040f000001000200008a000000000121016f0000000102000029000000ff0220018f000000000121019f0000000902000029098a09860000040f000000200100003900000100020000390000000000120439000001200100003900000000000104390000026b010000410000098b0001042e00000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000001ea0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000001e30000413d000000000420004c000001f80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000002080000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000002010000413d000000000420004c000002160000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000000010000190000098c000104300000026c0100004100000000001004350000004101000039000000040200003900000000001204350000026d010000410000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000200000000000020000000001000411000800000001001d0000000001000410000080020210008c000002420000613d0000000802000029000080010220008c000002420000613d0000026e020000410000000000200439000000040200003900000000001204390000026f0100004100008002020000390000000003000415000000200330008a00000020033000c9098a096d0000040f000000ff010000390000001f0110024f000000000110004c000003ed0000613d000000200100035f000000000101043b000000000110004c000003ef0000613d001e00400000003d00000080050000390000004001000039000500000001001d00000000005104350000000002000031000000030120008c000003120000a13d001d00000000001d0000000101000367000000000301043b000000e003300270000002700430009c000002ab0000c13d0000000003000416000000000330004c000003740000c13d000000040220008a00000266030000410000005f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c000003760000613d0000000402100370000000000302043b0000027f0230009c000003780000813d0000002402100370000000000202043b000200000002001d0000027f0220009c0000037a0000813d0000004401100370000000000101043b000700000001001d000600000003001d000000000030043500000001010000390000002002000039000100000001001d000400000002001d00000000001204350000028001000041000080100200003900000000030004150000001c0330008a00000020033000c9098a096d0000040f0000001c0100035f000000ff02000039000300000002001d0000001b0220024f000000010220008c0000037c0000c13d000000000101043b0000001d0200002900000008030000290000000000320435000000040300002900000000001304350000004001200210000002810110019700000280011001c7000080100200003900000000030004150000001a0330008a00000020033000c9098a096d0000040f0000001a0100035f0000000302000029000000190220024f000000000220004c0000039a0000613d000000000101043b098a09880000040f000000010200008a000000000221004b0000000703000029000002a00000613d000000000231004b0000000002030019000003b80000413d000000000321004900000006010000290000000802000029098a08be0000040f000000070300002900000006010000290000000202000029098a07c20000040f00000005010000290000000001010433000000010200002900000000002104350000004001100210000002810110019700000283011001c70000098b0001042e000002710430009c000002c90000a13d000002720430009c000002e40000213d000002760430009c000003140000613d000002770430009c000003c90000613d000002780130009c000003120000c13d0000000001000416000000000110004c000003ff0000c13d000000040120008a000000010200008a0000026603000041000000000221004b000000000200001900000000020320190000026601100197000002660410009c00000000030080190000026601100167000002660110009c00000000010200190000000001036019000000000110004c0000044f0000c13d00000000010000190000098c00010430000700000005001d000002790430009c000002fc0000a13d0000027a0430009c000003260000613d0000027b0430009c0000033a0000613d0000027c0330009c000003120000c13d0000000003000416000000000330004c000003f10000c13d000000040220008a00000266030000410000003f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c000004070000c13d00000000010000190000098c00010430000002730430009c0000034e0000613d000002740430009c000003db0000613d000002750330009c000003120000c13d0000000003000416000000000330004c000004010000c13d000000040220008a00000266030000410000003f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c0000046c0000c13d00000000010000190000098c000104300000027d0430009c000003600000613d0000027e0330009c000003120000c13d0000000003000416000000000330004c000003f30000c13d000000040220008a00000266030000410000003f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c0000040e0000c13d00000000010000190000098c0001043000000000010000190000098c000104300000000003000416000000000330004c000003f50000c13d000000040220008a00000266030000410000003f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c000004140000c13d00000000010000190000098c000104300000000001000416000000000110004c000003f70000c13d000000040120008a000000010200008a0000026603000041000000000221004b000000000200001900000000020320190000026601100197000002660410009c00000000030080190000026601100167000002660110009c00000000010200190000000001036019000000000110004c0000041b0000c13d00000000010000190000098c000104300000000001000416000000000110004c000003f90000c13d000000040120008a000000010200008a0000026603000041000000000221004b000000000200001900000000020320190000026601100197000002660410009c00000000030080190000026601100167000002660110009c00000000010200190000000001036019000000000110004c000004240000c13d00000000010000190000098c000104300000000003000416000000000330004c000003fb0000c13d000000040220008a00000266030000410000003f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c0000042e0000c13d00000000010000190000098c000104300000000001000416000000000110004c000003fd0000c13d000000040120008a000000010200008a0000026603000041000000000221004b000000000200001900000000020320190000026601100197000002660410009c00000000030080190000026601100167000002660110009c00000000010200190000000001036019000000000110004c000004350000c13d00000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000038a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003830000413d000000000420004c000003980000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000003a80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003a10000413d000000000420004c000003b60000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300000000501000029000000000101043300000044021000390000028d03000041000000000032043500000024021000390000001d03000039000000000032043500000286020000410000000000210435000000040210003900000004030000290000000000320435000000400110021000000281011001970000028c011001c70000098c000104300000000003000416000000000330004c000004030000c13d000000040220008a00000266030000410000001f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c000004720000c13d00000000010000190000098c000104300000000003000416000000000330004c000004050000c13d000000040220008a00000266030000410000003f0420008c000000000400001900000000040320190000026602200197000000000520004c0000000003008019000002660220009c00000000020400190000000002036019000000000220004c000004780000c13d00000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098b0001042e00000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c0001043000000000010000190000098c000104300000000401100370000000000101043b000700000001001d0000027f0110009c0000047e0000413d00000000010000190000098c000104300000000402100370000000000202043b0000027f0320009c000004bb0000413d00000000010000190000098c000104300000000402100370000000000202043b000800000002001d0000027f0220009c000004c70000413d00000000010000190000098c000104300000000201000039098a09880000040f0000000502000029000000000202043300000000001204350000004001200210000002810110019700000283011001c70000098b0001042e0000000501000039098a09880000040f00000005020000290000000002020433000000ff0110018f00000000001204350000004001200210000002810110019700000283011001c70000098b0001042e0000000402100370000000000202043b000700000002001d0000027f0220009c000004db0000413d00000000010000190000098c000104300000000301000039000800000001001d098a09880000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b000005210000613d0000026c0100004100000000001004350000002201000039000000040200003900000000001204350000026d010000410000098c0001043000000005010000290000000001010433000400000001001d0000000401000039000300000001001d098a09880000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b0000052d0000613d0000026c0100004100000000001004350000002201000039000000030200002900000000001204350000026d010000410000098c000104300000000402100370000000000202043b0000027f0320009c0000053b0000413d00000000010000190000098c000104300000000401100370000000000101043b0000027f0210009c000005420000413d00000000010000190000098c000104300000000402100370000000000202043b0000027f0320009c000005590000413d00000000010000190000098c000104300000000801000029000000000010043500000001010000390000002002000039000400000001001d000500000002001d0000000000120435000002800100004100008010020000390000000003000415000000180330008a00000020033000c9098a096d0000040f000000180100035f000000ff02000039000600000002001d000000170220024f000000010220008c000005650000c13d000000000101043b0000001d0200002900000007030000290000000000320435000000050300002900000000001304350000004001200210000002810110019700000060020000390000001e022001ef0000026a02200197000000000121019f00000282011001c700008010020000390000000003000415000000160330008a00000020033000c9098a096d0000040f000000160100035f0000000602000029000000150220024f000000000220004c0000067b0000613d000000000101043b098a09880000040f00000001020003670000002402200370000000000202043b0000000003120019000000000123004b00000000010000190000000101004039000000010110018f000000000110004c000007080000613d0000026c0100004100000000001004350000001101000039000000040200003900000000001204350000026d010000410000098c000104300000002401100370000000000301043b0000000801000029098a08be0000040f00000005010000290000000001010433000000010200003900000000002104350000004001100210000002810110019700000283011001c70000098b0001042e0000000802000029000000000220004c000005830000c13d0000000501000029000000000101043300000044021000390000028b03000041000000000032043500000024021000390000001f03000039000000000032043500000286020000410000000000210435000000040210003900000020030000390000000000320435000000400110021000000281011001970000028c011001c70000098c000104300000002401100370000000000101043b000400000001001d0000000801000029000000000010043500000001020000390000002001000039000600000001001d000300000002001d0000000000210435000002800100004100008010020000390000000003000415000000100330008a00000020033000c9098a096d0000040f000000100100035f000000ff02000039000500000002001d0000000f0220024f000000010220008c000005980000c13d000000000101043b0000001d0200002900000007030000290000000000320435000000060300002900000000001304350000004001200210000002810110019700000060020000390000001e022001ef0000026a02200197000000000121019f00000282011001c7000080100200003900000000030004150000000e0330008a00000020033000c9098a096d0000040f0000000e0100035f00000005020000290000000d0220024f000000000220004c000006990000613d000000000101043b098a09880000040f0000000402000029000000000221004b000007130000813d0000001e010000290000000001010433000000640210003900000284030000410000000000320435000000440210003900000285030000410000000000320435000000240210003900000025030000390000000000320435000002860200004100000000002104350000000402100039000000060300002900000000003204350000004001100210000002810110019700000287011001c70000098c0001043000000007030000290000000000530435000000000220004c000005b60000c13d000001000200008a000000000121016f000000a0020000390000000000120435000000000150004c000000c001000039000000a001006039000005ce0000013d00000004030000290000000000530435000000000220004c000005ec0000c13d000001000200008a000000000121016f000000040200002900000020022000390000000000120435000000000150004c00000020010000390000000001006019000800000001001d000006050000013d0000002401100370000000000101043b000800000001001d0000027f0110009c0000062c0000413d00000000010000190000098c00010430000000000010043500000020010000390000000000010435000002800100004100008010020000390000000003000415000000120330008a00000020033000c9098a096d0000040f000000120100035f000000ff02000039000000110220024f000000010220008c0000065d0000c13d000000000101043b098a09880000040f0000001e02000029000000000202043300000000001204350000004001200210000002810110019700000283011001c70000098b0001042e0000002401100370000000000301043b0000000801000029098a07c20000040f00000005010000290000000001010433000000010200003900000000002104350000004001100210000002810110019700000283011001c70000098b0001042e00000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000005730000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000056c0000413d000000000420004c000005810000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300000002401100370000000000101043b000700000001001d0000000201000039098a09880000040f000000000201001900000007010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000006b70000613d0000026c0100004100000000001004350000001101000039000000040200003900000000001204350000026d010000410000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000005a60000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000059f0000413d000000000420004c000005b40000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000008010000290000000000100435000000bf01000039000800000001001d000000a003000039000000000150004c000005dd0000613d0000028e030000410000000001000019000600000005001d000800000003001d000700000001001d0000000001030019098a09880000040f00000007040000290000000803000029000000a0024000390000000000120435000000010330003900000020014000390000000602000029000000000221004b000005c00000413d000000c0014000390000001f02100039000000200100008a000800000002001d000000000112016f0000000003010019000000800110008a0000028f0110009c000005dd0000a13d0000026c0100004100000000001004350000004101000039000000040200003900000000001204350000026d010000410000098c000104300000000501000029000700000003001d000000000031043500000080020000390000000001030019098a07ab0000040f0000000702000029000000000121004900000060011002100000026a01100197000000080200002900000040022002100000029002200197000000000121019f0000098b0001042e0000001d0200002900000003010000290000000000120435000800000002001d000600000005001d000000000152004b000006050000813d00000004010000290000002001100039000500000001001d0000028802000041000700000002001d0000000001020019098a09880000040f0000000803000029000000050200002900000000023200190000000000120435000000070200002900000001022000390000002003300039000800000003001d0000000601000029000000000113004b000005f70000413d00000008010000290000003f01100039000000200200008a000000000121016f00000004020000290000000002210019000000000112004b000000000100001900000001010040390000000003020019000002650220009c000006220000213d000000010110018f000000000110004c000006220000c13d0000001e01000029000800000003001d000000000031043500000000010300190000000402000029098a07ab0000040f0000000802000029000000000121004900000060011002100000026a0110019700000040022002100000028102200197000000000121019f0000098b0001042e0000001d010000290000026c020000410000000000210435000000410200003900000003030000290000000000230435000000400110021000000281011001970000026d011001c70000098c00010430000000000020043500000001010000390000002002000039000600000002001d00000000001204350000028001000041000080100200003900000000030004150000000c0330008a00000020033000c9098a096d0000040f0000000c0100035f000000ff02000039000700000002001d0000000b0220024f000000010220008c000006ea0000c13d000000000101043b0000001d0200002900000008030000290000000000320435000000060300002900000000001304350000004001200210000002810110019700000060020000390000001e022001ef0000026a02200197000000000121019f00000282011001c7000080100200003900000000030004150000000a0330008a00000020033000c9098a096d0000040f0000000a0100035f0000000702000029000000090220024f000000000220004c000007460000613d000000000101043b098a09880000040f0000001e02000029000000000202043300000000001204350000004001200210000002810110019700000283011001c70000098b0001042e00000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000066b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006640000413d000000000420004c000006790000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000006890000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006820000413d000000000420004c000006970000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000006a70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006a00000413d000000000420004c000006b50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300000000202000039098a09860000040f0000000801000029000000000010043500000020010000390000000000010435000002800100004100008010020000390000000003000415000000140330008a00000020033000c9098a096d0000040f000000140100035f000000ff02000039000000130220024f000000010220008c000007200000c13d000000000101043b000600000001001d098a09880000040f000000070200002900000000012100190000000602000029098a09860000040f0000001e0100002900000000010104330000000702000029000000000021043500000289020000410000028a030000410000001d04000029000000000023041f0000000802000029000000000024041e000000210200008a000000000221004b0000073e0000213d0000002002100039000006e20000013d000000000003041e0000004001100039000000000312004b0000073e0000a13d000000000412004900000000030104330000003f0440008c000006de0000a13d00000020041000390000000004040433000000000043041e000006df0000013d00000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000006f80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006f10000413d000000000420004c000007060000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000008010000290000000702000029098a08be0000040f0000001e010000290000000001010433000000040200002900000000002104350000004001100210000002810110019700000283011001c70000098b0001042e0000000402000029000000000321004900000008010000290000000702000029098a08be0000040f0000001e010000290000000001010433000000030200002900000000002104350000004001100210000002810110019700000283011001c70000098b0001042e00000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000072e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007270000413d000000000420004c0000073c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300000001e010000290000000001010433000000010200003900000000002104350000004001100210000002810110019700000283011001c70000098b0001042e00000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000007540000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000074d0000413d000000000420004c000007620000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300000001f031000390000026604000041000000000523004b0000000005000019000000000504401900000266062001970000026603300197000000000763004b000000000400a019000000000363013f000002660330009c00000000030500190000000003046019000000000330004c000007990000613d0000000004010433000002670340009c0000079b0000813d0000003f03400039000000200500008a000000000653016f000000400500003900000000030504330000000006630019000000000736004b00000000070000190000000107004039000002650860009c000007a20000213d000000010770018f000000000770004c000007a20000c13d0000000000650435000000000043043500000000054100190000002005500039000000000225004b000007a90000213d000000000240004c000007940000613d000000000200001900000020022000390000000005320019000000000612001900000000060604330000000000650435000000000542004b0000078d0000413d0000000001340019000000200110003900000000000104350000000001030019000000000001042d00000000010000190000098c000104300000026c0100004100000000001004350000004101000039000000040200003900000000001204350000026d010000410000098c000104300000026c0100004100000000001004350000004101000039000000040200003900000000001204350000026d010000410000098c0001043000000000010000190000098c00010430000000200300003900000000003104350000000003020433000000200410003900000000003404350000004001100039000000000430004c000007bb0000613d000000000400001900000000054100190000002004400039000000000624001900000000060604330000000000650435000000000534004b000007b40000413d000000000231001900000000000204350000001f02300039000000200300008a000000000232016f0000000001210019000000000001042d000c0000000000020000029104100197000000000140004c000008280000613d000600000003001d0000029101200197000300000001001d000000000110004c0000083c0000613d000400000004001d00000000004004350000002001000039000200000001001d00000000000104350000028001000041000080100200003900000000030004150000000c0330008a00000020033000c9098a096d0000040f0000000c0100035f000000ff02000039000500000002001d0000000b0220024f000000010220008c000008500000c13d000000000101043b098a09880000040f00000000020100190000000601000029000100000002001d000000000112004b0000086e0000413d00000004010000290000000000100435000000020100002900000000000104350000028001000041000080100200003900000000030004150000000a0330008a00000020033000c9098a096d0000040f0000000a0200035f0000000501000029000000090110024f000000010110008c000008820000c13d000000060100002900000001030000290000000001130049000000000202043b098a09860000040f00000003010000290000000000100435000002800100004100008010020000390000000003000415000000080330008a00000020033000c9098a096d0000040f000000080100035f0000000502000029000000070220024f000000000220004c000008a00000613d000000000101043b000500000001001d098a09880000040f000000060200002900000000012100190000000502000029098a09860000040f000000400100003900000000010104330000000602000029000000000021043500000289020000410000028a03000041000000000023041f00000004020000290000000303000029000000000032041e000000210200008a000000000221004b000008260000213d00000020021000390000081e0000013d000000000003041e0000004001100039000000000312004b000008260000a13d000000000412004900000000030104330000003f0440008c0000081a0000a13d00000020041000390000000004040433000000000043041e0000081b0000013d0000000c00000005000000000001042d00000040010000390000000001010433000000640210003900000296030000410000000000320435000000440210003900000297030000410000000000320435000000240210003900000025030000390000000000320435000002860200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000002810110019700000287011001c70000098c0001043000000040010000390000000001010433000000640210003900000294030000410000000000320435000000440210003900000295030000410000000000320435000000240210003900000023030000390000000000320435000002860200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000002810110019700000287011001c70000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000085e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008570000413d000000000420004c0000086c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000040010000390000000001010433000000640210003900000292030000410000000000320435000000440210003900000293030000410000000000320435000000240210003900000026030000390000000000320435000002860200004100000000002104350000000402100039000000020300002900000000003204350000004001100210000002810110019700000287011001c70000098c0001043000000060012002700000001f0110018f00000065032002700000026903300197000000000430004c000008900000613d00000000040000190000000505400210000000000652034f000000000606043b00000000006504350000000104400039000000000534004b000008890000413d000000000410004c0000089e0000613d00000003011002100000000503300210000000000403043300000000041401cf000000000414022f000000000532034f000000000505043b0000010001100089000000000515022f00000000011501cf000000000141019f00000000001304350000026a012001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c000008ae0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008a70000413d000000000420004c000008bc0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300009000000000002000500000003001d0000029103100197000000000130004c000009090000613d0000029101200197000400000001001d000000000110004c0000091d0000613d000100000003001d000000000030043500000001010000390000002002000039000300000002001d0000000000120435000002800100004100008010020000390000000003000415000000090330008a00000020033000c9098a096d0000040f000000090100035f000000ff02000039000200000002001d000000080220024f000000010220008c000009310000c13d000000000101043b0000000402000029000000000020043500000003020000290000000000120435000002800100004100008010020000390000000003000415000000070330008a00000020033000c9098a096d0000040f000000070100035f0000000202000029000000060220024f000000000220004c0000094f0000613d000000000201043b0000000501000029098a09860000040f000000400100003900000000010104330000000502000029000000000021043500000298020000410000028a03000041000000000023041f00000001020000290000000403000029000000000032041e000000210200008a000000000221004b000009070000213d0000002002100039000008ff0000013d000000000003041e0000004001100039000000000312004b000009070000a13d000000000412004900000000030104330000003f0440008c000008fb0000a13d00000020041000390000000004040433000000000043041e000008fc0000013d0000000900000005000000000001042d0000004001000039000000000101043300000064021000390000029b03000041000000000032043500000044021000390000029c030000410000000000320435000000240210003900000024030000390000000000320435000002860200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000002810110019700000287011001c70000098c000104300000004001000039000000000101043300000064021000390000029903000041000000000032043500000044021000390000029a030000410000000000320435000000240210003900000022030000390000000000320435000002860200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000002810110019700000287011001c70000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000093f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000009380000413d000000000420004c0000094d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c0001043000000060021002700000001f0220018f00000065031002700000026903300197000000000430004c0000095d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000009560000413d000000000420004c0000096b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000026a011001970000098c000104300002000000000002000200000003001d0000002003300039000100000003001d0000097c002104230000000203000029000000200230011a000000000201035500000266010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000029d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d0000098a000004320000098b0001042e0000098c0001043000000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000ffffffffffffffff80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000020000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff00000000000000000000000000000000ffffffff00000000000000000000000000000002000000000000000000000000000000400000010000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000023b872dd0000000000000000000000000000000000000000000000000000000040c10f1800000000000000000000000000000000000000000000000000000000a457c2d600000000000000000000000000000000000000000000000000000000a457c2d700000000000000000000000000000000000000000000000000000000a9059cbb00000000000000000000000000000000000000000000000000000000dd62ed3e0000000000000000000000000000000000000000000000000000000040c10f190000000000000000000000000000000000000000000000000000000070a082310000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddc0000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000395093510000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000095ea7b3000000000000000000000001000000000000000000000000000000000000000002000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000207a65726f00000000000000000000000000000000000000000000000000000045524332303a2064656372656173656420616c6c6f77616e63652062656c6f7708c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000000000000008a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19bddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef000000000000000000000000000000000000000000000000000000200000000345524332303a206d696e7420746f20746865207a65726f206164647265737300000000000000000000000000000000000000006400000000000000000000000045524332303a20696e73756666696369656e7420616c6c6f77616e6365000000c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b000000000000000000000000000000000000000000000000ffffffffffffff7f0000000000000000000000000000000000000000ffffffe00000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff616c616e6365000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220616d6f756e7420657863656564732062657373000000000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220746f20746865207a65726f2061646472647265737300000000000000000000000000000000000000000000000000000045524332303a207472616e736665722066726f6d20746865207a65726f2061648c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925737300000000000000000000000000000000000000000000000000000000000045524332303a20617070726f766520746f20746865207a65726f206164647265726573730000000000000000000000000000000000000000000000000000000045524332303a20617070726f76652066726f6d20746865207a65726f206164647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0100029f1ae237141e9abe24ac7e34d4977fb6cc59fb6c79b09209e6dd6122bb"}},"contracts/tokens/ERC721.sol":{"InstPayToken":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"01000419cc58705cff74ab11925ba0b260743477eee2d844363172e4be2f7a08"}}}}}